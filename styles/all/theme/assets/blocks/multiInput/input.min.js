(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["blocks/multiInput/input"],{

/***/ "./develop/components/MultiInputUI/index.js":
/*!**************************************************!*\
  !*** ./develop/components/MultiInputUI/index.js ***!
  \**************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var _style_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style.scss */ "./develop/components/MultiInputUI/style.scss");
/* harmony import */ var _style_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_scss__WEBPACK_IMPORTED_MODULE_0__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



var Plugin = /*#__PURE__*/function () {
  function Plugin(element) {
    _classCallCheck(this, Plugin);

    _defineProperty(this, "addRow", function (e) {
      e.preventDefault();
      var $container = $(e.currentTarget).blur().prev();
      var $clone = $container.children().eq(0).clone().find('input').val('').end();
      $container.append($clone);
      Plugin.scrollToElement($clone, $container);
    });

    this.$element = $(element);

    if (this.$element.hasClass('sortable')) {
      this.$element.find('.sm-multi-input-list').sortable({
        axis: 'y',
        containment: 'parent'
      });
    }

    this.$element.find('.sm-multi-input-add').click(this.addRow);
    this.$element.on('click', '.sm-multi-input-delete', this.deleteRow);
  }

  _createClass(Plugin, [{
    key: "deleteRow",
    value: function deleteRow(e) {
      e.preventDefault();
      var $row = $(this).blur().closest('.sm-multi-input-item');
      var numSiblings = $row.siblings().length;

      if (numSiblings) {
        $row.remove();
      } else {
        $row.children('input').val('');
      }
    }
  }], [{
    key: "scrollToElement",
    value: function scrollToElement($element, $container) {
      var scrollTop = $element.offset().top;
      $container.stop().animate({
        scrollTop: scrollTop
      }, 300);
    }
  }]);

  return Plugin;
}();

var pluginName = 'multiInputUI';

if (typeof $.fn[pluginName] === 'undefined') {
  // preventing against multiple instantiations
  $.fn[pluginName] = function pluginWrapper() {
    return this.each(function iterator() {
      if (!$.data(this, "plugin_".concat(pluginName))) {
        $.data(this, "plugin_".concat(pluginName), new Plugin(this));
      }
    });
  };
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./develop/components/MultiInputUI/style.scss":
/*!****************************************************!*\
  !*** ./develop/components/MultiInputUI/style.scss ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZXZlbG9wL2NvbXBvbmVudHMvTXVsdGlJbnB1dFVJL2luZGV4LmpzIiwid2VicGFjazovLy8uL2RldmVsb3AvY29tcG9uZW50cy9NdWx0aUlucHV0VUkvc3R5bGUuc2NzcyJdLCJuYW1lcyI6WyJQbHVnaW4iLCJlbGVtZW50IiwiZSIsInByZXZlbnREZWZhdWx0IiwiJGNvbnRhaW5lciIsIiQiLCJjdXJyZW50VGFyZ2V0IiwiYmx1ciIsInByZXYiLCIkY2xvbmUiLCJjaGlsZHJlbiIsImVxIiwiY2xvbmUiLCJmaW5kIiwidmFsIiwiZW5kIiwiYXBwZW5kIiwic2Nyb2xsVG9FbGVtZW50IiwiJGVsZW1lbnQiLCJoYXNDbGFzcyIsInNvcnRhYmxlIiwiYXhpcyIsImNvbnRhaW5tZW50IiwiY2xpY2siLCJhZGRSb3ciLCJvbiIsImRlbGV0ZVJvdyIsIiRyb3ciLCJjbG9zZXN0IiwibnVtU2libGluZ3MiLCJzaWJsaW5ncyIsImxlbmd0aCIsInJlbW92ZSIsInNjcm9sbFRvcCIsIm9mZnNldCIsInRvcCIsInN0b3AiLCJhbmltYXRlIiwicGx1Z2luTmFtZSIsImZuIiwicGx1Z2luV3JhcHBlciIsImVhY2giLCJpdGVyYXRvciIsImRhdGEiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztJQUVNQSxNO0FBQ0wsa0JBQVlDLE9BQVosRUFBcUI7QUFBQTs7QUFBQSxvQ0FjWixVQUFBQyxDQUFDLEVBQUk7QUFDYkEsT0FBQyxDQUFDQyxjQUFGO0FBQ0EsVUFBTUMsVUFBVSxHQUFHQyxDQUFDLENBQUNILENBQUMsQ0FBQ0ksYUFBSCxDQUFELENBQ2pCQyxJQURpQixHQUVqQkMsSUFGaUIsRUFBbkI7QUFHQSxVQUFNQyxNQUFNLEdBQUdMLFVBQVUsQ0FDdkJNLFFBRGEsR0FFYkMsRUFGYSxDQUVWLENBRlUsRUFHYkMsS0FIYSxHQUliQyxJQUphLENBSVIsT0FKUSxFQUtiQyxHQUxhLENBS1QsRUFMUyxFQU1iQyxHQU5hLEVBQWY7QUFPQVgsZ0JBQVUsQ0FBQ1ksTUFBWCxDQUFrQlAsTUFBbEI7QUFDQVQsWUFBTSxDQUFDaUIsZUFBUCxDQUF1QlIsTUFBdkIsRUFBK0JMLFVBQS9CO0FBQ0EsS0E1Qm9COztBQUNwQixTQUFLYyxRQUFMLEdBQWdCYixDQUFDLENBQUNKLE9BQUQsQ0FBakI7O0FBRUEsUUFBSSxLQUFLaUIsUUFBTCxDQUFjQyxRQUFkLENBQXVCLFVBQXZCLENBQUosRUFBd0M7QUFDdkMsV0FBS0QsUUFBTCxDQUFjTCxJQUFkLENBQW1CLHNCQUFuQixFQUEyQ08sUUFBM0MsQ0FBb0Q7QUFDbkRDLFlBQUksRUFBRSxHQUQ2QztBQUVuREMsbUJBQVcsRUFBRTtBQUZzQyxPQUFwRDtBQUlBOztBQUVELFNBQUtKLFFBQUwsQ0FBY0wsSUFBZCxDQUFtQixxQkFBbkIsRUFBMENVLEtBQTFDLENBQWdELEtBQUtDLE1BQXJEO0FBQ0EsU0FBS04sUUFBTCxDQUFjTyxFQUFkLENBQWlCLE9BQWpCLEVBQTBCLHdCQUExQixFQUFvRCxLQUFLQyxTQUF6RDtBQUNBOzs7OzhCQWtCU3hCLEMsRUFBRztBQUNaQSxPQUFDLENBQUNDLGNBQUY7QUFDQSxVQUFNd0IsSUFBSSxHQUFHdEIsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUNYRSxJQURXLEdBRVhxQixPQUZXLENBRUgsc0JBRkcsQ0FBYjtBQUdBLFVBQU1DLFdBQVcsR0FBR0YsSUFBSSxDQUFDRyxRQUFMLEdBQWdCQyxNQUFwQzs7QUFDQSxVQUFJRixXQUFKLEVBQWlCO0FBQ2hCRixZQUFJLENBQUNLLE1BQUw7QUFDQSxPQUZELE1BRU87QUFDTkwsWUFBSSxDQUFDakIsUUFBTCxDQUFjLE9BQWQsRUFBdUJJLEdBQXZCLENBQTJCLEVBQTNCO0FBQ0E7QUFDRDs7O29DQUVzQkksUSxFQUFVZCxVLEVBQVk7QUFDNUMsVUFBTTZCLFNBQVMsR0FBR2YsUUFBUSxDQUFDZ0IsTUFBVCxHQUFrQkMsR0FBcEM7QUFDQS9CLGdCQUFVLENBQUNnQyxJQUFYLEdBQWtCQyxPQUFsQixDQUEwQjtBQUFFSixpQkFBUyxFQUFUQTtBQUFGLE9BQTFCLEVBQXlDLEdBQXpDO0FBQ0E7Ozs7OztBQUdGLElBQU1LLFVBQVUsR0FBRyxjQUFuQjs7QUFFQSxJQUFJLE9BQU9qQyxDQUFDLENBQUNrQyxFQUFGLENBQUtELFVBQUwsQ0FBUCxLQUE0QixXQUFoQyxFQUE2QztBQUM1QztBQUNBakMsR0FBQyxDQUFDa0MsRUFBRixDQUFLRCxVQUFMLElBQW1CLFNBQVNFLGFBQVQsR0FBeUI7QUFDM0MsV0FBTyxLQUFLQyxJQUFMLENBQVUsU0FBU0MsUUFBVCxHQUFvQjtBQUNwQyxVQUFJLENBQUNyQyxDQUFDLENBQUNzQyxJQUFGLENBQU8sSUFBUCxtQkFBdUJMLFVBQXZCLEVBQUwsRUFBMkM7QUFDMUNqQyxTQUFDLENBQUNzQyxJQUFGLENBQU8sSUFBUCxtQkFBdUJMLFVBQXZCLEdBQXFDLElBQUl0QyxNQUFKLENBQVcsSUFBWCxDQUFyQztBQUNBO0FBQ0QsS0FKTSxDQUFQO0FBS0EsR0FORDtBQU9BLEM7Ozs7Ozs7Ozs7OztBQy9ERCx1QyIsImZpbGUiOiJibG9ja3MvbXVsdGlJbnB1dC9pbnB1dC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4vc3R5bGUuc2Nzcyc7XG5cbmNsYXNzIFBsdWdpbiB7XG5cdGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcblx0XHR0aGlzLiRlbGVtZW50ID0gJChlbGVtZW50KTtcblxuXHRcdGlmICh0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdzb3J0YWJsZScpKSB7XG5cdFx0XHR0aGlzLiRlbGVtZW50LmZpbmQoJy5zbS1tdWx0aS1pbnB1dC1saXN0Jykuc29ydGFibGUoe1xuXHRcdFx0XHRheGlzOiAneScsXG5cdFx0XHRcdGNvbnRhaW5tZW50OiAncGFyZW50Jyxcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHRoaXMuJGVsZW1lbnQuZmluZCgnLnNtLW11bHRpLWlucHV0LWFkZCcpLmNsaWNrKHRoaXMuYWRkUm93KTtcblx0XHR0aGlzLiRlbGVtZW50Lm9uKCdjbGljaycsICcuc20tbXVsdGktaW5wdXQtZGVsZXRlJywgdGhpcy5kZWxldGVSb3cpO1xuXHR9XG5cblx0YWRkUm93ID0gZSA9PiB7XG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdGNvbnN0ICRjb250YWluZXIgPSAkKGUuY3VycmVudFRhcmdldClcblx0XHRcdC5ibHVyKClcblx0XHRcdC5wcmV2KCk7XG5cdFx0Y29uc3QgJGNsb25lID0gJGNvbnRhaW5lclxuXHRcdFx0LmNoaWxkcmVuKClcblx0XHRcdC5lcSgwKVxuXHRcdFx0LmNsb25lKClcblx0XHRcdC5maW5kKCdpbnB1dCcpXG5cdFx0XHQudmFsKCcnKVxuXHRcdFx0LmVuZCgpO1xuXHRcdCRjb250YWluZXIuYXBwZW5kKCRjbG9uZSk7XG5cdFx0UGx1Z2luLnNjcm9sbFRvRWxlbWVudCgkY2xvbmUsICRjb250YWluZXIpO1xuXHR9O1xuXG5cdGRlbGV0ZVJvdyhlKSB7XG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdGNvbnN0ICRyb3cgPSAkKHRoaXMpXG5cdFx0XHQuYmx1cigpXG5cdFx0XHQuY2xvc2VzdCgnLnNtLW11bHRpLWlucHV0LWl0ZW0nKTtcblx0XHRjb25zdCBudW1TaWJsaW5ncyA9ICRyb3cuc2libGluZ3MoKS5sZW5ndGg7XG5cdFx0aWYgKG51bVNpYmxpbmdzKSB7XG5cdFx0XHQkcm93LnJlbW92ZSgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQkcm93LmNoaWxkcmVuKCdpbnB1dCcpLnZhbCgnJyk7XG5cdFx0fVxuXHR9XG5cblx0c3RhdGljIHNjcm9sbFRvRWxlbWVudCgkZWxlbWVudCwgJGNvbnRhaW5lcikge1xuXHRcdGNvbnN0IHNjcm9sbFRvcCA9ICRlbGVtZW50Lm9mZnNldCgpLnRvcDtcblx0XHQkY29udGFpbmVyLnN0b3AoKS5hbmltYXRlKHsgc2Nyb2xsVG9wIH0sIDMwMCk7XG5cdH1cbn1cblxuY29uc3QgcGx1Z2luTmFtZSA9ICdtdWx0aUlucHV0VUknO1xuXG5pZiAodHlwZW9mICQuZm5bcGx1Z2luTmFtZV0gPT09ICd1bmRlZmluZWQnKSB7XG5cdC8vIHByZXZlbnRpbmcgYWdhaW5zdCBtdWx0aXBsZSBpbnN0YW50aWF0aW9uc1xuXHQkLmZuW3BsdWdpbk5hbWVdID0gZnVuY3Rpb24gcGx1Z2luV3JhcHBlcigpIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIGl0ZXJhdG9yKCkge1xuXHRcdFx0aWYgKCEkLmRhdGEodGhpcywgYHBsdWdpbl8ke3BsdWdpbk5hbWV9YCkpIHtcblx0XHRcdFx0JC5kYXRhKHRoaXMsIGBwbHVnaW5fJHtwbHVnaW5OYW1lfWAsIG5ldyBQbHVnaW4odGhpcykpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9O1xufVxuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==