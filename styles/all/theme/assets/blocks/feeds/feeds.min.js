(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["blocks/feeds/feeds"],{

/***/ "./develop/components/Feeds/index.js":
/*!*******************************************!*\
  !*** ./develop/components/Feeds/index.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Feeds; });
/* harmony import */ var jquery_ui_ui_widgets_tabs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery-ui/ui/widgets/tabs */ "./node_modules/jquery-ui/ui/widgets/tabs.js");
/* harmony import */ var jquery_ui_ui_widgets_tabs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery_ui_ui_widgets_tabs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var jquery_ui_themes_base_core_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery-ui/themes/base/core.css */ "./node_modules/jquery-ui-themes/themes/smoothness/jquery-ui.css");
/* harmony import */ var jquery_ui_themes_base_core_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery_ui_themes_base_core_css__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var jquery_ui_themes_base_theme_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jquery-ui/themes/base/theme.css */ "./node_modules/jquery-ui-themes/themes/smoothness/theme.css");
/* harmony import */ var jquery_ui_themes_base_theme_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jquery_ui_themes_base_theme_css__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var jquery_ui_themes_base_tabs_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jquery-ui/themes/base/tabs.css */ "./node_modules/jquery-ui/themes/base/tabs.css");
/* harmony import */ var jquery_ui_themes_base_tabs_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(jquery_ui_themes_base_tabs_css__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var codemirror_mode_twig_twig__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! codemirror/mode/twig/twig */ "./node_modules/codemirror/mode/twig/twig.js");
/* harmony import */ var codemirror_mode_twig_twig__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(codemirror_mode_twig_twig__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var codemirror_addon_hint_show_hint__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! codemirror/addon/hint/show-hint */ "./node_modules/codemirror/addon/hint/show-hint.js");
/* harmony import */ var codemirror_addon_hint_show_hint__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_hint_show_hint__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var codemirror_addon_hint_show_hint_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! codemirror/addon/hint/show-hint.css */ "./node_modules/codemirror/addon/hint/show-hint.css");
/* harmony import */ var codemirror_addon_hint_show_hint_css__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_hint_show_hint_css__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _style_scss__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./style.scss */ "./develop/components/Feeds/style.scss");
/* harmony import */ var _style_scss__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_style_scss__WEBPACK_IMPORTED_MODULE_7__);
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }









var _window = window,
    actions = _window.actions;
var samples = ["<a href=\"{{ item.link }}\" target=\"_blank\">{{ item.title }}</a>\t", "\n{% if item.enclosure.link %}\n<a href=\"{{ item.link }}\" target=\"_blank\" class=\"img-ui\">\n\t<img src=\"{{ item.enclosure.link }}\" alt=\"{{ lang('IMAGE') }}\" />\n</a>\n{% endif %}\n<div class=\"sm-fill-space small-img\">\n\t<p class=\"topic-title\"><a href=\"{{ item.link }}\" target=\"_blank\">{{ item.title }}</a></p>\n\t<div class=\"author\">{{ item.date|date(\"m/d/Y\") }}</div>\n\t<p>{{ item.description }}</p>\n\t<p>\n\t\t<a href=\"{{ item.feed.link }}\" target=\"_blank\">\n\t\t{% if item.feed.image_url %}\n\t\t\t<img src=\"{{ item.feed.image_url }}\" alt=\"{{ item.feed.image_title }}\" />\n\t\t{% else %}\n\t\t\t{{ item.feed.title }}\n\t\t{% endif %}\n\t\t</a>\n\t</p>\n</div>\n\t", "\n{% set images = attribute(item, 'get_item_tags', ['', 'image']) %}\n<a href=\"{{ item.link }}\" target=\"_blank\">\n\t<div class=\"img-ui\">\n\t\t<img src=\"{{ images[0].data }}\" alt=\"\" />\n\t</div>\n\t{{ item.title }}\n</a>\n\t"];
function Feeds($dialogDiv, Twig, _ref) {
  var CodeMirror = _ref.default,
      initCodeMirror = _ref.initCodeMirror;
  var fields = {};
  var tplData = {};
  var $previewBox;
  var $sourceBox;
  var $dataBox;
  var $template;
  Twig.extendFunction('lang', function (value) {
    return value;
  });

  function getFeeds() {
    return $('.sm-multi-input-item input').get().map(function (el) {
      return $(el).val();
    });
  }

  function previewFeed(tplString) {
    tplString = "<ul class=\"sm-list\">\n{% for item in items %}\n\t<li>\n\t\t".concat(tplString, "\n\t</li>\n{% endfor %}\n</ul>");
    var template = Twig.twig({
      data: tplString
    });
    var output = template.render(tplData);
    $previewBox.html(output);
    $sourceBox.text(output);
  }

  function getFields() {
    var data = {
      feeds: getFeeds(),
      method: 'get_fields',
      service: 'blitze.sitemaker.block.feeds'
    };
    $.post(actions.handle_custom_action, data).done(function (resp) {
      tplData = resp.data;
      fields = {
        children: resp.fields
      };
      previewFeed($template.val());
      $dataBox.html(JSON.stringify(tplData, undefined, 4));
    });
  }

  function getWordMapping(str) {
    var regex = /{%\s+for\s+(.*?)\s+in\s+(.*?)\s+%}/gim;
    var mapping = {
      item: 'items' // since user is only entering template for each item, for item in items

    };
    var m; // eslint-disable-next-line no-cond-assign

    while ((m = regex.exec(str)) !== null) {
      // This is necessary to avoid infinite loops with zero-width matches
      if (m.index === regex.lastIndex) {
        regex.lastIndex += 1;
      }

      var _m = m,
          _m2 = _slicedToArray(_m, 3),
          word = _m2[1],
          match = _m2[2];

      mapping[word] = match;
    }

    return mapping;
  }

  function translatePath(str, mapping) {
    var skipArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var parts = str.split('.');
    var parent = parts.shift();

    if (mapping[parent]) {
      var sub = translatePath(mapping[parent], mapping);
      var path = [sub].concat(_toConsumableArray(parts)).join('.');

      if (!skipArray) {
        path += '.0';
      }

      return path;
    }

    return [parent].concat(_toConsumableArray(parts)).join('.');
  }

  function findHint(cm) {
    var cursor = cm.getCursor();
    var line = cm.getLine(cursor.line);
    var contentFromLineUp = cm.getValue().split('\n').slice(0, cursor.line + 1).join();
    var start = cursor.ch;
    var end = cursor.ch;

    while (start && /\S/.test(line.charAt(start - 1))) {
      start -= 1;
    }

    while (end < line.length && /\w/.test(line.charAt(end))) {
      end += 1;
    }

    var word = line.slice(start, end).toLowerCase();
    var mapping = getWordMapping(contentFromLineUp);
    var translatedPath = translatePath(word, mapping, true);
    var wordPathAr = translatedPath.split('.');
    var currentWord = wordPathAr.pop();
    var found = wordPathAr.reduce(function (p, c) {
      return p.children && p.children[c] || null;
    }, fields);
    var list = Object.values(found && !Array.isArray(found) ? found.children : fields.children);

    if (list.length && currentWord.length) {
      list = list.filter(function (item) {
        return item.text.indexOf(currentWord) >= 0;
      });
    }

    return {
      list: list,
      from: CodeMirror.Pos(cursor.line, end - currentWord.length),
      to: CodeMirror.Pos(cursor.line, cursor.ch)
    };
  }

  function completeAfterDot(cm) {
    setTimeout(function () {
      var cursor = cm.getCursor();

      if (cm.getTokenTypeAt(cursor) === 'variable') {
        cm.showHint({
          hint: findHint,
          completeSingle: false
        });
      }
    }, 100);
    return CodeMirror.Pass;
  }

  function codeMirrorIsInitialized() {
    return $('#sm-feed-template').next().hasClass('CodeMirror');
  }

  $previewBox = $dialogDiv.find('#sm-feeds-preview');
  $sourceBox = $dialogDiv.find('#sm-feeds-preview-source');
  $dataBox = $dialogDiv.find('#sm-feeds-data');
  $template = $dialogDiv.find('#sm-feed-template');

  if (!codeMirrorIsInitialized()) {
    var codeMirror = initCodeMirror('#sm-feed-template', {
      mode: {
        name: 'twig',
        htmlMode: true
      },
      actionBtnsSelector: '.sm-feed-template-button',
      extraKeys: {
        "'.'": completeAfterDot,
        'Ctrl-Space': 'autocomplete'
      }
    });
    codeMirror.on('blur', function (cm) {
      var data = cm.getValue().trim();
      previewFeed(data);
    });
    var sampleKey = 0;
    $dialogDiv.on('click', '#sm-template-samples', function (e) {
      e.preventDefault();
      var sample = samples[sampleKey].trim();
      sampleKey = sampleKey < samples.length - 1 ? sampleKey + 1 : 0;
      codeMirror.setValue(sample);
      previewFeed(sample);
    });
  }

  $dialogDiv.on('input', '.sm-multi-input-item input', getFields);
  $dialogDiv.on('click', '.sm-multi-input-delete', getFields);
  $dialogDiv.find('#sm-feeds-tabs').tabs({
    active: false,
    collapsible: true
  });
  getFields();
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./develop/components/Feeds/style.scss":
/*!*********************************************!*\
  !*** ./develop/components/Feeds/style.scss ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,