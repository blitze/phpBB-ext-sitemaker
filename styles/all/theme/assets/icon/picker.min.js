(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["icon/picker"],{

/***/ "./develop/components/Icons/picker.js":
/*!********************************************!*\
  !*** ./develop/components/Icons/picker.js ***!
  \********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var jquery_ui_ui_widgets_tabs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery-ui/ui/widgets/tabs */ "./node_modules/jquery-ui/ui/widgets/tabs.js");
/* harmony import */ var jquery_ui_ui_widgets_tabs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery_ui_ui_widgets_tabs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var jquery_ui_themes_base_core_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery-ui/themes/base/core.css */ "./node_modules/jquery-ui-themes/themes/smoothness/jquery-ui.css");
/* harmony import */ var jquery_ui_themes_base_core_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery_ui_themes_base_core_css__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var jquery_ui_themes_base_theme_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jquery-ui/themes/base/theme.css */ "./node_modules/jquery-ui-themes/themes/smoothness/theme.css");
/* harmony import */ var jquery_ui_themes_base_theme_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jquery_ui_themes_base_theme_css__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var jquery_ui_themes_base_tabs_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jquery-ui/themes/base/tabs.css */ "./node_modules/jquery-ui/themes/base/tabs.css");
/* harmony import */ var jquery_ui_themes_base_tabs_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(jquery_ui_themes_base_tabs_css__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _OutsideClick__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../OutsideClick */ "./develop/components/OutsideClick/index.js");
/* harmony import */ var _picker_scss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./picker.scss */ "./develop/components/Icons/picker.scss");
/* harmony import */ var _picker_scss__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_picker_scss__WEBPACK_IMPORTED_MODULE_5__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * Sitemaker iconPicker
 * Author: @blitze
 * Licensed under the GPL license
 */






var pluginName = 'iconPicker';
var dataPlugin = "plugin_".concat(pluginName);
var defaults = {
  selector: '',
  width: '350px',
  onSelect: function onSelect() {}
};
var currentItem = {}; // The actual plugin constructor

var Plugin = function constructor($element) {
  this.options = $.extend({}, defaults);
  this.$container = $element;
};

Plugin.prototype = {
  init: function init(options) {
    var _this = this;

    this.selectedIcon = '';
    this.$iconsDiv = $('#icon-picker');
    this.$iconsSearch = this.$iconsDiv.find('#icons-search');
    this.$fontList = this.$iconsDiv.find('#icons-font-list');
    this.$icons = this.$fontList.find('.filter-icon');
    this.$colorBoxes = this.$iconsDiv.find('.icons-color-container');
    this.$customization = this.$iconsDiv.find('#icon-customization');
    this.$preview = this.$iconsDiv.find('#icon-picker-preview');
    $.extend(this.options, options);
    this.$container.on('click', this.options.selector, function (e) {
      e.preventDefault();
      e.stopPropagation();
      var $element = $(e.currentTarget);

      if (!_this.$element || _this.$element.context !== $element.context) {
        _this.showPicker($element);

        var $iconCats = _this.$fontList.find('.icon-cat');

        var height = $iconCats.eq(0).height(); // create cache of icon cats and their heights relative to the top of the icons list container
        // we only do this once

        _this.catsCache = _this.catsCache || $iconCats.map(function (i, el) {
          var $category = $(el);

          var _$category$position = $category.position(),
              top = _$category$position.top;

          return {
            id: $category.attr('id'),
            top: top,
            bottom: top + height
          };
        }).get();
      } else {
        _this.hidePicker();
      }
    });
    this.$icons.find('i').click(function (e) {
      e.preventDefault();
      e.stopImmediatePropagation();

      _this.selectIcon($(e.currentTarget));
    });
    this.$iconsSearch.keyup(function (e) {
      var keyword = $(e.currentTarget).val();

      if (keyword.length) {
        _this.$icons.hide().filter("div[data-filter*=\"".concat(keyword, "\"]")).show();
      } else {
        _this.$icons.show();
      }
    });
    var $categoriesList = this.$iconsDiv.width(this.options.width).find('#icons-font-cat-list').change(function (e) {
      e.preventDefault();

      _this.$iconsSearch.val('');

      _this.$icons.show();

      _this.scrollToIcon($($(e.target).find(':selected').val()));
    });
    this.$fontList.on('scroll', function () {
      if (!_this.$iconsSearch.val().length) {
        // find icon cat that is in viewport
        var category = _this.catsCache.find(function (cat) {
          return _this.isInViewport(cat);
        });

        if (category) {
          $categoriesList.val("#".concat(category.id));
        }
      }
    });
    this.$iconsDiv.find('#icon-picker-insert').click(function (e) {
      e.preventDefault();
      e.stopImmediatePropagation();

      _this.insertIcon(_this.selectedIcon);
    });
    this.$iconsDiv.find('#icon-picker-none').click(function (e) {
      e.preventDefault();
      e.stopImmediatePropagation();

      _this.insertIcon('');
    });
    this.$customization.find('.icons-customize').change(function (e) {
      e.preventDefault();

      _this.previewIcon();
    });
    this.$colorBoxes.click(function (e) {
      e.preventDefault();

      _this.$colorBoxes.removeClass('selected');

      $(e.currentTarget).addClass('selected').next().prop('checked', 'checked').trigger('click');

      _this.previewIcon();
    });
    var $tabs = $('#icons-tab').tabs().parent(); // fix the classes

    var tabsBottomSelector = '.icons-bottom-tabs .ui-tabs-nav, .icons-bottom-tabs .ui-tabs-nav > *';
    $tabs.find(tabsBottomSelector).removeClass('ui-corner-all ui-corner-top').addClass('ui-corner-bottom'); // move the nav to the bottom

    $tabs.find('.icons-bottom-tabs .ui-tabs-nav').appendTo('.icons-bottom-tabs');
    this.hidePicker = this.hidePicker.bind(this);
    Object(_OutsideClick__WEBPACK_IMPORTED_MODULE_4__["default"])(this.$iconsDiv, this.hidePicker);
  },
  isInViewport: function isInViewport(cat) {
    var viewportTop = this.$fontList.scrollTop();
    var viewportBottom = viewportTop + this.$fontList.height() / 2;
    return cat.bottom > viewportTop && cat.top < viewportBottom;
  },
  getIconProps: function getIconProps(iconClass) {
    var classes = [];

    if (iconClass) {
      classes.push(iconClass);
      $.each(this.$customization.serializeArray(), function (i, field) {
        if (field.value) {
          classes.push(field.value);
        }
      });
    }

    return classes.join(' ');
  },
  insertIcon: function insertIcon(icon) {
    if ($.isEmptyObject(currentItem) !== true) {
      var iconClass = this.getIconProps(icon);
      var iconHtml = iconClass ? "<i class=\"".concat(iconClass, "\" aria-hidden=\"true\"></i>") : '';
      currentItem.html(iconHtml);
      this.options.onSelect.call(this, currentItem, iconClass, iconHtml);
    }

    this.hidePicker();
  },
  previewIcon: function previewIcon() {
    this.$preview.children('i').attr('class', this.getIconProps(this.selectedIcon));
  },
  selectIcon: function selectIcon($element) {
    this.$fontList.find('a').removeClass('icon-selected');
    this.selectedIcon = $element.attr('class');
    this.previewIcon(this.selectedIcon);
    $element.parent().addClass('icon-selected');
  },
  setCurrentIcon: function setCurrentIcon($element) {
    var $currIcon = $element.find('i');
    var $settings = this.$customization.find(':input').removeAttr('checked').removeAttr('selected');
    this.$colorBoxes.removeClass('selected');
    this.$fontList.find('a').removeClass('icon-selected');
    this.selectedIcon = '';

    if ($currIcon.length) {
      var iconInfo = $currIcon.attr('class').trim().split(' ');
      var prefix = iconInfo.shift();
      var iconClass = iconInfo.shift();
      var $icon = this.$fontList.find(".".concat(iconClass)).eq(0);

      if ($icon.length > 0) {
        $icon.parent().addClass('icon-selected');
        this.selectedIcon = "".concat(prefix, " ").concat(iconClass);
        this.scrollToIcon($icon, true);
        var $selects = $settings.filter('select').children();
        var $inputs = $settings.not('select');
        $.each(iconInfo, function (i, val) {
          $inputs.filter("[value=".concat(val, "]")).attr('checked', true);
          $selects.filter("[value=".concat(val, "]")).parent().val(val);
        });
        var $color = this.$customization.find('input[name=color]:checked');

        if ($color.length > 0) {
          $color.prev().addClass('selected');
        }
      }
    }

    this.previewIcon();
  },
  showPicker: function showPicker($element) {
    var pos = $element.offset();
    var height = $element.height();
    $element.removeClass('icons-drop');
    this.$iconsDiv.slideDown().offset({
      top: pos.top + height,
      left: pos.left - 15
    });
    this.setCurrentIcon($element);
    this.$element = $element;
    currentItem = $element.addClass('icons-drop');
  },
  hidePicker: function hidePicker() {
    if (this.$element) {
      this.$iconsDiv.slideUp();
      this.$element.removeClass('icons-drop');
      this.$element = undefined;
    }
  },
  scrollToIcon: function scrollToIcon($element, center) {
    var adjustment = 0;

    if (center) {
      adjustment = -(this.$fontList.height() / 2);
    }

    this.$fontList.animate({
      scrollTop: this.$fontList.scrollTop() + $element.position().top + adjustment
    }, 1000);
  },
  destroy: function destroy() {
    this.$element.data(dataPlugin, null);
  }
};

$.fn[pluginName] = function pluginInstance(arg) {
  if (!(this.data(dataPlugin) instanceof Plugin)) {
    this.data(dataPlugin, new Plugin(this));
  }

  var instance = this.data(dataPlugin);

  if (instance !== undefined) {
    instance.element = this;

    if (typeof arg === 'undefined' || _typeof(arg) === 'object') {
      if (typeof instance.init === 'function') {
        instance.init(arg);
      }
    } else if (typeof arg === 'string' && typeof instance[arg] === 'function') {
      for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        rest[_key - 1] = arguments[_key];
      }

      return instance[arg].apply(instance, [arg].concat(rest));
    } else {
      $.error("Method ".concat(arg, " does not exist on jQuery.").concat(pluginName));
    }
  }

  return this;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./develop/components/Icons/picker.scss":
/*!**********************************************!*\
  !*** ./develop/components/Icons/picker.scss ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./node_modules/jquery-ui/themes/base/tabs.css":
/*!*****************************************************!*\
  !*** ./node_modules/jquery-ui/themes/base/tabs.css ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./node_modules/jquery-ui/ui/widgets/tabs.js":
/*!***************************************************!*\
  !*** ./node_modules/jquery-ui/ui/widgets/tabs.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery UI Tabs 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Tabs
//>>group: Widgets
//>>description: Transforms a set of container elements into a tab structure.
//>>docs: http://api.jqueryui.com/tabs/
//>>demos: http://jqueryui.com/tabs/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/tabs.css
//>>css.theme: ../../themes/base/theme.css

( function( factory ) {
	if ( true ) {

		// AMD. Register as an anonymous module.
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
			__webpack_require__(/*! jquery */ "jquery"),
			__webpack_require__(/*! ../escape-selector */ "./node_modules/jquery-ui/ui/escape-selector.js"),
			__webpack_require__(/*! ../keycode */ "./node_modules/jquery-ui/ui/keycode.js"),
			__webpack_require__(/*! ../safe-active-element */ "./node_modules/jquery-ui/ui/safe-active-element.js"),
			__webpack_require__(/*! ../unique-id */ "./node_modules/jquery-ui/ui/unique-id.js"),
			__webpack_require__(/*! ../version */ "./node_modules/jquery-ui/ui/version.js"),
			__webpack_require__(/*! ../widget */ "./node_modules/jquery-ui/ui/widget.js")
		], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
}( function( $ ) {

$.widget( "ui.tabs", {
	version: "1.12.1",
	delay: 300,
	options: {
		active: null,
		classes: {
			"ui-tabs": "ui-corner-all",
			"ui-tabs-nav": "ui-corner-all",
			"ui-tabs-panel": "ui-corner-bottom",
			"ui-tabs-tab": "ui-corner-top"
		},
		collapsible: false,
		event: "click",
		heightStyle: "content",
		hide: null,
		show: null,

		// Callbacks
		activate: null,
		beforeActivate: null,
		beforeLoad: null,
		load: null
	},

	_isLocal: ( function() {
		var rhash = /#.*$/;

		return function( anchor ) {
			var anchorUrl, locationUrl;

			anchorUrl = anchor.href.replace( rhash, "" );
			locationUrl = location.href.replace( rhash, "" );

			// Decoding may throw an error if the URL isn't UTF-8 (#9518)
			try {
				anchorUrl = decodeURIComponent( anchorUrl );
			} catch ( error ) {}
			try {
				locationUrl = decodeURIComponent( locationUrl );
			} catch ( error ) {}

			return anchor.hash.length > 1 && anchorUrl === locationUrl;
		};
	} )(),

	_create: function() {
		var that = this,
			options = this.options;

		this.running = false;

		this._addClass( "ui-tabs", "ui-widget ui-widget-content" );
		this._toggleClass( "ui-tabs-collapsible", null, options.collapsible );

		this._processTabs();
		options.active = this._initialActive();

		// Take disabling tabs via class attribute from HTML
		// into account and update option properly.
		if ( $.isArray( options.disabled ) ) {
			options.disabled = $.unique( options.disabled.concat(
				$.map( this.tabs.filter( ".ui-state-disabled" ), function( li ) {
					return that.tabs.index( li );
				} )
			) ).sort();
		}

		// Check for length avoids error when initializing empty list
		if ( this.options.active !== false && this.anchors.length ) {
			this.active = this._findActive( options.active );
		} else {
			this.active = $();
		}

		this._refresh();

		if ( this.active.length ) {
			this.load( options.active );
		}
	},

	_initialActive: function() {
		var active = this.options.active,
			collapsible = this.options.collapsible,
			locationHash = location.hash.substring( 1 );

		if ( active === null ) {

			// check the fragment identifier in the URL
			if ( locationHash ) {
				this.tabs.each( function( i, tab ) {
					if ( $( tab ).attr( "aria-controls" ) === locationHash ) {
						active = i;
						return false;
					}
				} );
			}

			// Check for a tab marked active via a class
			if ( active === null ) {
				active = this.tabs.index( this.tabs.filter( ".ui-tabs-active" ) );
			}

			// No active tab, set to false
			if ( active === null || active === -1 ) {
				active = this.tabs.length ? 0 : false;
			}
		}

		// Handle numbers: negative, out of range
		if ( active !== false ) {
			active = this.tabs.index( this.tabs.eq( active ) );
			if ( active === -1 ) {
				active = collapsible ? false : 0;
			}
		}

		// Don't allow collapsible: false and active: false
		if ( !collapsible && active === false && this.anchors.length ) {
			active = 0;
		}

		return active;
	},

	_getCreateEventData: function() {
		return {
			tab: this.active,
			panel: !this.active.length ? $() : this._getPanelForTab( this.active )
		};
	},

	_tabKeydown: function( event ) {
		var focusedTab = $( $.ui.safeActiveElement( this.document[ 0 ] ) ).closest( "li" ),
			selectedIndex = this.tabs.index( focusedTab ),
			goingForward = true;

		if ( this._handlePageNav( event ) ) {
			return;
		}

		switch ( event.keyCode ) {
		case $.ui.keyCode.RIGHT:
		case $.ui.keyCode.DOWN:
			selectedIndex++;
			break;
		case $.ui.keyCode.UP:
		case $.ui.keyCode.LEFT:
			goingForward = false;
			selectedIndex--;
			break;
		case $.ui.keyCode.END:
			selectedIndex = this.anchors.length - 1;
			break;
		case $.ui.keyCode.HOME:
			selectedIndex = 0;
			break;
		case $.ui.keyCode.SPACE:

			// Activate only, no collapsing
			event.preventDefault();
			clearTimeout( this.activating );
			this._activate( selectedIndex );
			return;
		case $.ui.keyCode.ENTER:

			// Toggle (cancel delayed activation, allow collapsing)
			event.preventDefault();
			clearTimeout( this.activating );

			// Determine if we should collapse or activate
			this._activate( selectedIndex === this.options.active ? false : selectedIndex );
			return;
		default:
			return;
		}

		// Focus the appropriate tab, based on which key was pressed
		event.preventDefault();
		clearTimeout( this.activating );
		selectedIndex = this._focusNextTab( selectedIndex, goingForward );

		// Navigating with control/command key will prevent automatic activation
		if ( !event.ctrlKey && !event.metaKey ) {

			// Update aria-selected immediately so that AT think the tab is already selected.
			// Otherwise AT may confuse the user by stating that they need to activate the tab,
			// but the tab will already be activated by the time the announcement finishes.
			focusedTab.attr( "aria-selected", "false" );
			this.tabs.eq( selectedIndex ).attr( "aria-selected", "true" );

			this.activating = this._delay( function() {
				this.option( "active", selectedIndex );
			}, this.delay );
		}
	},

	_panelKeydown: function( event ) {
		if ( this._handlePageNav( event ) ) {
			return;
		}

		// Ctrl+up moves focus to the current tab
		if ( event.ctrlKey && event.keyCode === $.ui.keyCode.UP ) {
			event.preventDefault();
			this.active.trigger( "focus" );
		}
	},

	// Alt+page up/down moves focus to the previous/next tab (and activates)
	_handlePageNav: function( event ) {
		if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP ) {
			this._activate( this._focusNextTab( this.options.active - 1, false ) );
			return true;
		}
		if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN ) {
			this._activate( this._focusNextTab( this.options.active + 1, true ) );
			return true;
		}
	},

	_findNextTab: function( index, goingForward ) {
		var lastTabIndex = this.tabs.length - 1;

		function constrain() {
			if ( index > lastTabIndex ) {
				index = 0;
			}
			if ( index < 0 ) {
				index = lastTabIndex;
			}
			return index;
		}

		while ( $.inArray( constrain(), this.options.disabled ) !== -1 ) {
			index = goingForward ? index + 1 : index - 1;
		}

		return index;
	},

	_focusNextTab: function( index, goingForward ) {
		index = this._findNextTab( index, goingForward );
		this.tabs.eq( index ).trigger( "focus" );
		return index;
	},

	_setOption: function( key, value ) {
		if ( key === "active" ) {

			// _activate() will handle invalid values and update this.options
			this._activate( value );
			return;
		}

		this._super( key, value );

		if ( key === "collapsible" ) {
			this._toggleClass( "ui-tabs-collapsible", null, value );

			// Setting collapsible: false while collapsed; open first panel
			if ( !value && this.options.active === false ) {
				this._activate( 0 );
			}
		}

		if ( key === "event" ) {
			this._setupEvents( value );
		}

		if ( key === "heightStyle" ) {
			this._setupHeightStyle( value );
		}
	},

	_sanitizeSelector: function( hash ) {
		return hash ? hash.replace( /[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&" ) : "";
	},

	refresh: function() {
		var options = this.options,
			lis = this.tablist.children( ":has(a[href])" );

		// Get disabled tabs from class attribute from HTML
		// this will get converted to a boolean if needed in _refresh()
		options.disabled = $.map( lis.filter( ".ui-state-disabled" ), function( tab ) {
			return lis.index( tab );
		} );

		this._processTabs();

		// Was collapsed or no tabs
		if ( options.active === false || !this.anchors.length ) {
			options.active = false;
			this.active = $();

		// was active, but active tab is gone
		} else if ( this.active.length && !$.contains( this.tablist[ 0 ], this.active[ 0 ] ) ) {

			// all remaining tabs are disabled
			if ( this.tabs.length === options.disabled.length ) {
				options.active = false;
				this.active = $();

			// activate previous tab
			} else {
				this._activate( this._findNextTab( Math.max( 0, options.active - 1 ), false ) );
			}

		// was active, active tab still exists
		} else {

			// make sure active index is correct
			options.active = this.tabs.index( this.active );
		}

		this._refresh();
	},

	_refresh: function() {
		this._setOptionDisabled( this.options.disabled );
		this._setupEvents( this.options.event );
		this._setupHeightStyle( this.options.heightStyle );

		this.tabs.not( this.active ).attr( {
			"aria-selected": "false",
			"aria-expanded": "false",
			tabIndex: -1
		} );
		this.panels.not( this._getPanelForTab( this.active ) )
			.hide()
			.attr( {
				"aria-hidden": "true"
			} );

		// Make sure one tab is in the tab order
		if ( !this.active.length ) {
			this.tabs.eq( 0 ).attr( "tabIndex", 0 );
		} else {
			this.active
				.attr( {
					"aria-selected": "true",
					"aria-expanded": "true",
					tabIndex: 0
				} );
			this._addClass( this.active, "ui-tabs-active", "ui-state-active" );
			this._getPanelForTab( this.active )
				.show()
				.attr( {
					"aria-hidden": "false"
				} );
		}
	},

	_processTabs: function() {
		var that = this,
			prevTabs = this.tabs,
			prevAnchors = this.anchors,
			prevPanels = this.panels;

		this.tablist = this._getList().attr( "role", "tablist" );
		this._addClass( this.tablist, "ui-tabs-nav",
			"ui-helper-reset ui-helper-clearfix ui-widget-header" );

		// Prevent users from focusing disabled tabs via click
		this.tablist
			.on( "mousedown" + this.eventNamespace, "> li", function( event ) {
				if ( $( this ).is( ".ui-state-disabled" ) ) {
					event.preventDefault();
				}
			} )

			// Support: IE <9
			// Preventing the default action in mousedown doesn't prevent IE
			// from focusing the element, so if the anchor gets focused, blur.
			// We don't have to worry about focusing the previously focused
			// element since clicking on a non-focusable element should focus
			// the body anyway.
			.on( "focus" + this.eventNamespace, ".ui-tabs-anchor", function() {
				if ( $( this ).closest( "li" ).is( ".ui-state-disabled" ) ) {
					this.blur();
				}
			} );

		this.tabs = this.tablist.find( "> li:has(a[href])" )
			.attr( {
				role: "tab",
				tabIndex: -1
			} );
		this._addClass( this.tabs, "ui-tabs-tab", "ui-state-default" );

		this.anchors = this.tabs.map( function() {
			return $( "a", this )[ 0 ];
		} )
			.attr( {
				role: "presentation",
				tabIndex: -1
			} );
		this._addClass( this.anchors, "ui-tabs-anchor" );

		this.panels = $();

		this.anchors.each( function( i, anchor ) {
			var selector, panel, panelId,
				anchorId = $( anchor ).uniqueId().attr( "id" ),
				tab = $( anchor ).closest( "li" ),
				originalAriaControls = tab.attr( "aria-controls" );

			// Inline tab
			if ( that._isLocal( anchor ) ) {
				selector = anchor.hash;
				panelId = selector.substring( 1 );
				panel = that.element.find( that._sanitizeSelector( selector ) );

			// remote tab
			} else {

				// If the tab doesn't already have aria-controls,
				// generate an id by using a throw-away element
				panelId = tab.attr( "aria-controls" ) || $( {} ).uniqueId()[ 0 ].id;
				selector = "#" + panelId;
				panel = that.element.find( selector );
				if ( !panel.length ) {
					panel = that._createPanel( panelId );
					panel.insertAfter( that.panels[ i - 1 ] || that.tablist );
				}
				panel.attr( "aria-live", "polite" );
			}

			if ( panel.length ) {
				that.panels = that.panels.add( panel );
			}
			if ( originalAriaControls ) {
				tab.data( "ui-tabs-aria-controls", originalAriaControls );
			}
			tab.attr( {
				"aria-controls": panelId,
				"aria-labelledby": anchorId
			} );
			panel.attr( "aria-labelledby", anchorId );
		} );

		this.panels.attr( "role", "tabpanel" );
		this._addClass( this.panels, "ui-tabs-panel", "ui-widget-content" );

		// Avoid memory leaks (#10056)
		if ( prevTabs ) {
			this._off( prevTabs.not( this.tabs ) );
			this._off( prevAnchors.not( this.anchors ) );
			this._off( prevPanels.not( this.panels ) );
		}
	},

	// Allow overriding how to find the list for rare usage scenarios (#7715)
	_getList: function() {
		return this.tablist || this.element.find( "ol, ul" ).eq( 0 );
	},

	_createPanel: function( id ) {
		return $( "<div>" )
			.attr( "id", id )
			.data( "ui-tabs-destroy", true );
	},

	_setOptionDisabled: function( disabled ) {
		var currentItem, li, i;

		if ( $.isArray( disabled ) ) {
			if ( !disabled.length ) {
				disabled = false;
			} else if ( disabled.length === this.anchors.length ) {
				disabled = true;
			}
		}

		// Disable tabs
		for ( i = 0; ( li = this.tabs[ i ] ); i++ ) {
			currentItem = $( li );
			if ( disabled === true || $.inArray( i, disabled ) !== -1 ) {
				currentItem.attr( "aria-disabled", "true" );
				this._addClass( currentItem, null, "ui-state-disabled" );
			} else {
				currentItem.removeAttr( "aria-disabled" );
				this._removeClass( currentItem, null, "ui-state-disabled" );
			}
		}

		this.options.disabled = disabled;

		this._toggleClass( this.widget(), this.widgetFullName + "-disabled", null,
			disabled === true );
	},

	_setupEvents: function( event ) {
		var events = {};
		if ( event ) {
			$.each( event.split( " " ), function( index, eventName ) {
				events[ eventName ] = "_eventHandler";
			} );
		}

		this._off( this.anchors.add( this.tabs ).add( this.panels ) );

		// Always prevent the default action, even when disabled
		this._on( true, this.anchors, {
			click: function( event ) {
				event.preventDefault();
			}
		} );
		this._on( this.anchors, events );
		this._on( this.tabs, { keydown: "_tabKeydown" } );
		this._on( this.panels, { keydown: "_panelKeydown" } );

		this._focusable( this.tabs );
		this._hoverable( this.tabs );
	},

	_setupHeightStyle: function( heightStyle ) {
		var maxHeight,
			parent = this.element.parent();

		if ( heightStyle === "fill" ) {
			maxHeight = parent.height();
			maxHeight -= this.element.outerHeight() - this.element.height();

			this.element.siblings( ":visible" ).each( function() {
				var elem = $( this ),
					position = elem.css( "position" );

				if ( position === "absolute" || position === "fixed" ) {
					return;
				}
				maxHeight -= elem.outerHeight( true );
			} );

			this.element.children().not( this.panels ).each( function() {
				maxHeight -= $( this ).outerHeight( true );
			} );

			this.panels.each( function() {
				$( this ).height( Math.max( 0, maxHeight -
					$( this ).innerHeight() + $( this ).height() ) );
			} )
				.css( "overflow", "auto" );
		} else if ( heightStyle === "auto" ) {
			maxHeight = 0;
			this.panels.each( function() {
				maxHeight = Math.max( maxHeight, $( this ).height( "" ).height() );
			} ).height( maxHeight );
		}
	},

	_eventHandler: function( event ) {
		var options = this.options,
			active = this.active,
			anchor = $( event.currentTarget ),
			tab = anchor.closest( "li" ),
			clickedIsActive = tab[ 0 ] === active[ 0 ],
			collapsing = clickedIsActive && options.collapsible,
			toShow = collapsing ? $() : this._getPanelForTab( tab ),
			toHide = !active.length ? $() : this._getPanelForTab( active ),
			eventData = {
				oldTab: active,
				oldPanel: toHide,
				newTab: collapsing ? $() : tab,
				newPanel: toShow
			};

		event.preventDefault();

		if ( tab.hasClass( "ui-state-disabled" ) ||

				// tab is already loading
				tab.hasClass( "ui-tabs-loading" ) ||

				// can't switch durning an animation
				this.running ||

				// click on active header, but not collapsible
				( clickedIsActive && !options.collapsible ) ||

				// allow canceling activation
				( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
			return;
		}

		options.active = collapsing ? false : this.tabs.index( tab );

		this.active = clickedIsActive ? $() : tab;
		if ( this.xhr ) {
			this.xhr.abort();
		}

		if ( !toHide.length && !toShow.length ) {
			$.error( "jQuery UI Tabs: Mismatching fragment identifier." );
		}

		if ( toShow.length ) {
			this.load( this.tabs.index( tab ), event );
		}
		this._toggle( event, eventData );
	},

	// Handles show/hide for selecting tabs
	_toggle: function( event, eventData ) {
		var that = this,
			toShow = eventData.newPanel,
			toHide = eventData.oldPanel;

		this.running = true;

		function complete() {
			that.running = false;
			that._trigger( "activate", event, eventData );
		}

		function show() {
			that._addClass( eventData.newTab.closest( "li" ), "ui-tabs-active", "ui-state-active" );

			if ( toShow.length && that.options.show ) {
				that._show( toShow, that.options.show, complete );
			} else {
				toShow.show();
				complete();
			}
		}

		// Start out by hiding, then showing, then completing
		if ( toHide.length && this.options.hide ) {
			this._hide( toHide, this.options.hide, function() {
				that._removeClass( eventData.oldTab.closest( "li" ),
					"ui-tabs-active", "ui-state-active" );
				show();
			} );
		} else {
			this._removeClass( eventData.oldTab.closest( "li" ),
				"ui-tabs-active", "ui-state-active" );
			toHide.hide();
			show();
		}

		toHide.attr( "aria-hidden", "true" );
		eventData.oldTab.attr( {
			"aria-selected": "false",
			"aria-expanded": "false"
		} );

		// If we're switching tabs, remove the old tab from the tab order.
		// If we're opening from collapsed state, remove the previous tab from the tab order.
		// If we're collapsing, then keep the collapsing tab in the tab order.
		if ( toShow.length && toHide.length ) {
			eventData.oldTab.attr( "tabIndex", -1 );
		} else if ( toShow.length ) {
			this.tabs.filter( function() {
				return $( this ).attr( "tabIndex" ) === 0;
			} )
				.attr( "tabIndex", -1 );
		}

		toShow.attr( "aria-hidden", "false" );
		eventData.newTab.attr( {
			"aria-selected": "true",
			"aria-expanded": "true",
			tabIndex: 0
		} );
	},

	_activate: function( index ) {
		var anchor,
			active = this._findActive( index );

		// Trying to activate the already active panel
		if ( active[ 0 ] === this.active[ 0 ] ) {
			return;
		}

		// Trying to collapse, simulate a click on the current active header
		if ( !active.length ) {
			active = this.active;
		}

		anchor = active.find( ".ui-tabs-anchor" )[ 0 ];
		this._eventHandler( {
			target: anchor,
			currentTarget: anchor,
			preventDefault: $.noop
		} );
	},

	_findActive: function( index ) {
		return index === false ? $() : this.tabs.eq( index );
	},

	_getIndex: function( index ) {

		// meta-function to give users option to provide a href string instead of a numerical index.
		if ( typeof index === "string" ) {
			index = this.anchors.index( this.anchors.filter( "[href$='" +
				$.ui.escapeSelector( index ) + "']" ) );
		}

		return index;
	},

	_destroy: function() {
		if ( this.xhr ) {
			this.xhr.abort();
		}

		this.tablist
			.removeAttr( "role" )
			.off( this.eventNamespace );

		this.anchors
			.removeAttr( "role tabIndex" )
			.removeUniqueId();

		this.tabs.add( this.panels ).each( function() {
			if ( $.data( this, "ui-tabs-destroy" ) ) {
				$( this ).remove();
			} else {
				$( this ).removeAttr( "role tabIndex " +
					"aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded" );
			}
		} );

		this.tabs.each( function() {
			var li = $( this ),
				prev = li.data( "ui-tabs-aria-controls" );
			if ( prev ) {
				li
					.attr( "aria-controls", prev )
					.removeData( "ui-tabs-aria-controls" );
			} else {
				li.removeAttr( "aria-controls" );
			}
		} );

		this.panels.show();

		if ( this.options.heightStyle !== "content" ) {
			this.panels.css( "height", "" );
		}
	},

	enable: function( index ) {
		var disabled = this.options.disabled;
		if ( disabled === false ) {
			return;
		}

		if ( index === undefined ) {
			disabled = false;
		} else {
			index = this._getIndex( index );
			if ( $.isArray( disabled ) ) {
				disabled = $.map( disabled, function( num ) {
					return num !== index ? num : null;
				} );
			} else {
				disabled = $.map( this.tabs, function( li, num ) {
					return num !== index ? num : null;
				} );
			}
		}
		this._setOptionDisabled( disabled );
	},

	disable: function( index ) {
		var disabled = this.options.disabled;
		if ( disabled === true ) {
			return;
		}

		if ( index === undefined ) {
			disabled = true;
		} else {
			index = this._getIndex( index );
			if ( $.inArray( index, disabled ) !== -1 ) {
				return;
			}
			if ( $.isArray( disabled ) ) {
				disabled = $.merge( [ index ], disabled ).sort();
			} else {
				disabled = [ index ];
			}
		}
		this._setOptionDisabled( disabled );
	},

	load: function( index, event ) {
		index = this._getIndex( index );
		var that = this,
			tab = this.tabs.eq( index ),
			anchor = tab.find( ".ui-tabs-anchor" ),
			panel = this._getPanelForTab( tab ),
			eventData = {
				tab: tab,
				panel: panel
			},
			complete = function( jqXHR, status ) {
				if ( status === "abort" ) {
					that.panels.stop( false, true );
				}

				that._removeClass( tab, "ui-tabs-loading" );
				panel.removeAttr( "aria-busy" );

				if ( jqXHR === that.xhr ) {
					delete that.xhr;
				}
			};

		// Not remote
		if ( this._isLocal( anchor[ 0 ] ) ) {
			return;
		}

		this.xhr = $.ajax( this._ajaxSettings( anchor, event, eventData ) );

		// Support: jQuery <1.8
		// jQuery <1.8 returns false if the request is canceled in beforeSend,
		// but as of 1.8, $.ajax() always returns a jqXHR object.
		if ( this.xhr && this.xhr.statusText !== "canceled" ) {
			this._addClass( tab, "ui-tabs-loading" );
			panel.attr( "aria-busy", "true" );

			this.xhr
				.done( function( response, status, jqXHR ) {

					// support: jQuery <1.8
					// http://bugs.jquery.com/ticket/11778
					setTimeout( function() {
						panel.html( response );
						that._trigger( "load", event, eventData );

						complete( jqXHR, status );
					}, 1 );
				} )
				.fail( function( jqXHR, status ) {

					// support: jQuery <1.8
					// http://bugs.jquery.com/ticket/11778
					setTimeout( function() {
						complete( jqXHR, status );
					}, 1 );
				} );
		}
	},

	_ajaxSettings: function( anchor, event, eventData ) {
		var that = this;
		return {

			// Support: IE <11 only
			// Strip any hash that exists to prevent errors with the Ajax request
			url: anchor.attr( "href" ).replace( /#.*$/, "" ),
			beforeSend: function( jqXHR, settings ) {
				return that._trigger( "beforeLoad", event,
					$.extend( { jqXHR: jqXHR, ajaxSettings: settings }, eventData ) );
			}
		};
	},

	_getPanelForTab: function( tab ) {
		var id = $( tab ).attr( "aria-controls" );
		return this.element.find( this._sanitizeSelector( "#" + id ) );
	}
} );

// DEPRECATED
// TODO: Switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

	// Backcompat for ui-tab class (now ui-tabs-tab)
	$.widget( "ui.tabs", $.ui.tabs, {
		_processTabs: function() {
			this._superApply( arguments );
			this._addClass( this.tabs, "ui-tab" );
		}
	} );
}

return $.ui.tabs;

} ) );


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZXZlbG9wL2NvbXBvbmVudHMvSWNvbnMvcGlja2VyLmpzIiwid2VicGFjazovLy8uL2RldmVsb3AvY29tcG9uZW50cy9JY29ucy9waWNrZXIuc2NzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5LXVpL3RoZW1lcy9iYXNlL3RhYnMuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcXVlcnktdWkvdWkvd2lkZ2V0cy90YWJzLmpzIl0sIm5hbWVzIjpbInBsdWdpbk5hbWUiLCJkYXRhUGx1Z2luIiwiZGVmYXVsdHMiLCJzZWxlY3RvciIsIndpZHRoIiwib25TZWxlY3QiLCJjdXJyZW50SXRlbSIsIlBsdWdpbiIsImNvbnN0cnVjdG9yIiwiJGVsZW1lbnQiLCJvcHRpb25zIiwiJCIsImV4dGVuZCIsIiRjb250YWluZXIiLCJwcm90b3R5cGUiLCJpbml0Iiwic2VsZWN0ZWRJY29uIiwiJGljb25zRGl2IiwiJGljb25zU2VhcmNoIiwiZmluZCIsIiRmb250TGlzdCIsIiRpY29ucyIsIiRjb2xvckJveGVzIiwiJGN1c3RvbWl6YXRpb24iLCIkcHJldmlldyIsIm9uIiwiZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY3VycmVudFRhcmdldCIsImNvbnRleHQiLCJzaG93UGlja2VyIiwiJGljb25DYXRzIiwiaGVpZ2h0IiwiZXEiLCJjYXRzQ2FjaGUiLCJtYXAiLCJpIiwiZWwiLCIkY2F0ZWdvcnkiLCJwb3NpdGlvbiIsInRvcCIsImlkIiwiYXR0ciIsImJvdHRvbSIsImdldCIsImhpZGVQaWNrZXIiLCJjbGljayIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInNlbGVjdEljb24iLCJrZXl1cCIsImtleXdvcmQiLCJ2YWwiLCJsZW5ndGgiLCJoaWRlIiwiZmlsdGVyIiwic2hvdyIsIiRjYXRlZ29yaWVzTGlzdCIsImNoYW5nZSIsInNjcm9sbFRvSWNvbiIsInRhcmdldCIsImNhdGVnb3J5IiwiY2F0IiwiaXNJblZpZXdwb3J0IiwiaW5zZXJ0SWNvbiIsInByZXZpZXdJY29uIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsIm5leHQiLCJwcm9wIiwidHJpZ2dlciIsIiR0YWJzIiwidGFicyIsInBhcmVudCIsInRhYnNCb3R0b21TZWxlY3RvciIsImFwcGVuZFRvIiwiYmluZCIsIk91dHNpZGVDbGljayIsInZpZXdwb3J0VG9wIiwic2Nyb2xsVG9wIiwidmlld3BvcnRCb3R0b20iLCJnZXRJY29uUHJvcHMiLCJpY29uQ2xhc3MiLCJjbGFzc2VzIiwicHVzaCIsImVhY2giLCJzZXJpYWxpemVBcnJheSIsImZpZWxkIiwidmFsdWUiLCJqb2luIiwiaWNvbiIsImlzRW1wdHlPYmplY3QiLCJpY29uSHRtbCIsImh0bWwiLCJjYWxsIiwiY2hpbGRyZW4iLCJzZXRDdXJyZW50SWNvbiIsIiRjdXJySWNvbiIsIiRzZXR0aW5ncyIsInJlbW92ZUF0dHIiLCJpY29uSW5mbyIsInRyaW0iLCJzcGxpdCIsInByZWZpeCIsInNoaWZ0IiwiJGljb24iLCIkc2VsZWN0cyIsIiRpbnB1dHMiLCJub3QiLCIkY29sb3IiLCJwcmV2IiwicG9zIiwib2Zmc2V0Iiwic2xpZGVEb3duIiwibGVmdCIsInNsaWRlVXAiLCJ1bmRlZmluZWQiLCJjZW50ZXIiLCJhZGp1c3RtZW50IiwiYW5pbWF0ZSIsImRlc3Ryb3kiLCJkYXRhIiwiZm4iLCJwbHVnaW5JbnN0YW5jZSIsImFyZyIsImluc3RhbmNlIiwiZWxlbWVudCIsInJlc3QiLCJlcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUEsSUFBTUEsVUFBVSxHQUFHLFlBQW5CO0FBQ0EsSUFBTUMsVUFBVSxvQkFBYUQsVUFBYixDQUFoQjtBQUNBLElBQU1FLFFBQVEsR0FBRztBQUNoQkMsVUFBUSxFQUFFLEVBRE07QUFFaEJDLE9BQUssRUFBRSxPQUZTO0FBR2hCQyxV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QUFXO0FBQ2QsR0FBRyxvQ0FBRSxPQUFPO0FBQUE7QUFBQTtBQUFBLG9HQUFFO0FBQ2QsRUFBRSxNQUFNLEVBSU47QUFDRixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQSxnREFBZ0QsYUFBYSxFQUFFO0FBQy9ELEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyx5QkFBeUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0Esd0JBQXdCLHlCQUF5QjtBQUNqRCwwQkFBMEIsMkJBQTJCOztBQUVyRDtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHOztBQUVIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU07QUFDTixLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sS0FBSztBQUNMO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix1Q0FBdUM7QUFDdkQ7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7O0FBRUEsQ0FBQyIsImZpbGUiOiJpY29uL3BpY2tlci5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIFNpdGVtYWtlciBpY29uUGlja2VyXG4gKiBBdXRob3I6IEBibGl0emVcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBHUEwgbGljZW5zZVxuICovXG5pbXBvcnQgJ2pxdWVyeS11aS91aS93aWRnZXRzL3RhYnMnO1xuaW1wb3J0ICdqcXVlcnktdWkvdGhlbWVzL2Jhc2UvY29yZS5jc3MnO1xuaW1wb3J0ICdqcXVlcnktdWkvdGhlbWVzL2Jhc2UvdGhlbWUuY3NzJztcbmltcG9ydCAnanF1ZXJ5LXVpL3RoZW1lcy9iYXNlL3RhYnMuY3NzJztcblxuaW1wb3J0IE91dHNpZGVDbGljayBmcm9tICcuLi9PdXRzaWRlQ2xpY2snO1xuXG5pbXBvcnQgJy4vcGlja2VyLnNjc3MnO1xuXG5jb25zdCBwbHVnaW5OYW1lID0gJ2ljb25QaWNrZXInO1xuY29uc3QgZGF0YVBsdWdpbiA9IGBwbHVnaW5fJHtwbHVnaW5OYW1lfWA7XG5jb25zdCBkZWZhdWx0cyA9IHtcblx0c2VsZWN0b3I6ICcnLFxuXHR3aWR0aDogJzM1MHB4Jyxcblx0b25TZWxlY3Q6ICgpID0+IHt9LFxufTtcbmxldCBjdXJyZW50SXRlbSA9IHt9O1xuXG4vLyBUaGUgYWN0dWFsIHBsdWdpbiBjb25zdHJ1Y3RvclxuY29uc3QgUGx1Z2luID0gZnVuY3Rpb24gY29uc3RydWN0b3IoJGVsZW1lbnQpIHtcblx0dGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIGRlZmF1bHRzKTtcblx0dGhpcy4kY29udGFpbmVyID0gJGVsZW1lbnQ7XG59O1xuXG5QbHVnaW4ucHJvdG90eXBlID0ge1xuXHRpbml0OiBmdW5jdGlvbiBpbml0KG9wdGlvbnMpIHtcblx0XHR0aGlzLnNlbGVjdGVkSWNvbiA9ICcnO1xuXHRcdHRoaXMuJGljb25zRGl2ID0gJCgnI2ljb24tcGlja2VyJyk7XG5cdFx0dGhpcy4kaWNvbnNTZWFyY2ggPSB0aGlzLiRpY29uc0Rpdi5maW5kKCcjaWNvbnMtc2VhcmNoJyk7XG5cdFx0dGhpcy4kZm9udExpc3QgPSB0aGlzLiRpY29uc0Rpdi5maW5kKCcjaWNvbnMtZm9udC1saXN0Jyk7XG5cdFx0dGhpcy4kaWNvbnMgPSB0aGlzLiRmb250TGlzdC5maW5kKCcuZmlsdGVyLWljb24nKTtcblx0XHR0aGlzLiRjb2xvckJveGVzID0gdGhpcy4kaWNvbnNEaXYuZmluZCgnLmljb25zLWNvbG9yLWNvbnRhaW5lcicpO1xuXHRcdHRoaXMuJGN1c3RvbWl6YXRpb24gPSB0aGlzLiRpY29uc0Rpdi5maW5kKCcjaWNvbi1jdXN0b21pemF0aW9uJyk7XG5cdFx0dGhpcy4kcHJldmlldyA9IHRoaXMuJGljb25zRGl2LmZpbmQoJyNpY29uLXBpY2tlci1wcmV2aWV3Jyk7XG5cblx0XHQkLmV4dGVuZCh0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuXG5cdFx0dGhpcy4kY29udGFpbmVyLm9uKCdjbGljaycsIHRoaXMub3B0aW9ucy5zZWxlY3RvciwgKGUpID0+IHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cblx0XHRcdGNvbnN0ICRlbGVtZW50ID0gJChlLmN1cnJlbnRUYXJnZXQpO1xuXG5cdFx0XHRpZiAoIXRoaXMuJGVsZW1lbnQgfHwgdGhpcy4kZWxlbWVudC5jb250ZXh0ICE9PSAkZWxlbWVudC5jb250ZXh0KSB7XG5cdFx0XHRcdHRoaXMuc2hvd1BpY2tlcigkZWxlbWVudCk7XG5cdFx0XHRcdGNvbnN0ICRpY29uQ2F0cyA9IHRoaXMuJGZvbnRMaXN0LmZpbmQoJy5pY29uLWNhdCcpO1xuXHRcdFx0XHRjb25zdCBoZWlnaHQgPSAkaWNvbkNhdHMuZXEoMCkuaGVpZ2h0KCk7XG5cblx0XHRcdFx0Ly8gY3JlYXRlIGNhY2hlIG9mIGljb24gY2F0cyBhbmQgdGhlaXIgaGVpZ2h0cyByZWxhdGl2ZSB0byB0aGUgdG9wIG9mIHRoZSBpY29ucyBsaXN0IGNvbnRhaW5lclxuXHRcdFx0XHQvLyB3ZSBvbmx5IGRvIHRoaXMgb25jZVxuXHRcdFx0XHR0aGlzLmNhdHNDYWNoZSA9XG5cdFx0XHRcdFx0dGhpcy5jYXRzQ2FjaGUgfHxcblx0XHRcdFx0XHQkaWNvbkNhdHNcblx0XHRcdFx0XHRcdC5tYXAoKGksIGVsKSA9PiB7XG5cdFx0XHRcdFx0XHRcdGNvbnN0ICRjYXRlZ29yeSA9ICQoZWwpO1xuXHRcdFx0XHRcdFx0XHRjb25zdCB7IHRvcCB9ID0gJGNhdGVnb3J5LnBvc2l0aW9uKCk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0aWQ6ICRjYXRlZ29yeS5hdHRyKCdpZCcpLFxuXHRcdFx0XHRcdFx0XHRcdHRvcCxcblx0XHRcdFx0XHRcdFx0XHRib3R0b206IHRvcCArIGhlaWdodCxcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0XHQuZ2V0KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmhpZGVQaWNrZXIoKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHRoaXMuJGljb25zLmZpbmQoJ2knKS5jbGljaygoZSkgPT4ge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdHRoaXMuc2VsZWN0SWNvbigkKGUuY3VycmVudFRhcmdldCkpO1xuXHRcdH0pO1xuXG5cdFx0dGhpcy4kaWNvbnNTZWFyY2gua2V5dXAoKGUpID0+IHtcblx0XHRcdGNvbnN0IGtleXdvcmQgPSAkKGUuY3VycmVudFRhcmdldCkudmFsKCk7XG5cdFx0XHRpZiAoa2V5d29yZC5sZW5ndGgpIHtcblx0XHRcdFx0dGhpcy4kaWNvbnNcblx0XHRcdFx0XHQuaGlkZSgpXG5cdFx0XHRcdFx0LmZpbHRlcihgZGl2W2RhdGEtZmlsdGVyKj1cIiR7a2V5d29yZH1cIl1gKVxuXHRcdFx0XHRcdC5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLiRpY29ucy5zaG93KCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRjb25zdCAkY2F0ZWdvcmllc0xpc3QgPSB0aGlzLiRpY29uc0RpdlxuXHRcdFx0LndpZHRoKHRoaXMub3B0aW9ucy53aWR0aClcblx0XHRcdC5maW5kKCcjaWNvbnMtZm9udC1jYXQtbGlzdCcpXG5cdFx0XHQuY2hhbmdlKChlKSA9PiB7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0dGhpcy4kaWNvbnNTZWFyY2gudmFsKCcnKTtcblx0XHRcdFx0dGhpcy4kaWNvbnMuc2hvdygpO1xuXHRcdFx0XHR0aGlzLnNjcm9sbFRvSWNvbigkKCQoZS50YXJnZXQpLmZpbmQoJzpzZWxlY3RlZCcpLnZhbCgpKSk7XG5cdFx0XHR9KTtcblxuXHRcdHRoaXMuJGZvbnRMaXN0Lm9uKCdzY3JvbGwnLCAoKSA9PiB7XG5cdFx0XHRpZiAoIXRoaXMuJGljb25zU2VhcmNoLnZhbCgpLmxlbmd0aCkge1xuXHRcdFx0XHQvLyBmaW5kIGljb24gY2F0IHRoYXQgaXMgaW4gdmlld3BvcnRcblx0XHRcdFx0Y29uc3QgY2F0ZWdvcnkgPSB0aGlzLmNhdHNDYWNoZS5maW5kKChjYXQpID0+XG5cdFx0XHRcdFx0dGhpcy5pc0luVmlld3BvcnQoY2F0KSxcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRpZiAoY2F0ZWdvcnkpIHtcblx0XHRcdFx0XHQkY2F0ZWdvcmllc0xpc3QudmFsKGAjJHtjYXRlZ29yeS5pZH1gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0dGhpcy4kaWNvbnNEaXYuZmluZCgnI2ljb24tcGlja2VyLWluc2VydCcpLmNsaWNrKChlKSA9PiB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0dGhpcy5pbnNlcnRJY29uKHRoaXMuc2VsZWN0ZWRJY29uKTtcblx0XHR9KTtcblxuXHRcdHRoaXMuJGljb25zRGl2LmZpbmQoJyNpY29uLXBpY2tlci1ub25lJykuY2xpY2soKGUpID0+IHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHR0aGlzLmluc2VydEljb24oJycpO1xuXHRcdH0pO1xuXG5cdFx0dGhpcy4kY3VzdG9taXphdGlvbi5maW5kKCcuaWNvbnMtY3VzdG9taXplJykuY2hhbmdlKChlKSA9PiB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR0aGlzLnByZXZpZXdJY29uKCk7XG5cdFx0fSk7XG5cblx0XHR0aGlzLiRjb2xvckJveGVzLmNsaWNrKChlKSA9PiB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR0aGlzLiRjb2xvckJveGVzLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpO1xuXHRcdFx0JChlLmN1cnJlbnRUYXJnZXQpXG5cdFx0XHRcdC5hZGRDbGFzcygnc2VsZWN0ZWQnKVxuXHRcdFx0XHQubmV4dCgpXG5cdFx0XHRcdC5wcm9wKCdjaGVja2VkJywgJ2NoZWNrZWQnKVxuXHRcdFx0XHQudHJpZ2dlcignY2xpY2snKTtcblx0XHRcdHRoaXMucHJldmlld0ljb24oKTtcblx0XHR9KTtcblxuXHRcdGNvbnN0ICR0YWJzID0gJCgnI2ljb25zLXRhYicpLnRhYnMoKS5wYXJlbnQoKTtcblxuXHRcdC8vIGZpeCB0aGUgY2xhc3Nlc1xuXHRcdGNvbnN0IHRhYnNCb3R0b21TZWxlY3RvciA9XG5cdFx0XHQnLmljb25zLWJvdHRvbS10YWJzIC51aS10YWJzLW5hdiwgLmljb25zLWJvdHRvbS10YWJzIC51aS10YWJzLW5hdiA+IConO1xuXHRcdCR0YWJzXG5cdFx0XHQuZmluZCh0YWJzQm90dG9tU2VsZWN0b3IpXG5cdFx0XHQucmVtb3ZlQ2xhc3MoJ3VpLWNvcm5lci1hbGwgdWktY29ybmVyLXRvcCcpXG5cdFx0XHQuYWRkQ2xhc3MoJ3VpLWNvcm5lci1ib3R0b20nKTtcblxuXHRcdC8vIG1vdmUgdGhlIG5hdiB0byB0aGUgYm90dG9tXG5cdFx0JHRhYnNcblx0XHRcdC5maW5kKCcuaWNvbnMtYm90dG9tLXRhYnMgLnVpLXRhYnMtbmF2Jylcblx0XHRcdC5hcHBlbmRUbygnLmljb25zLWJvdHRvbS10YWJzJyk7XG5cblx0XHR0aGlzLmhpZGVQaWNrZXIgPSB0aGlzLmhpZGVQaWNrZXIuYmluZCh0aGlzKTtcblx0XHRPdXRzaWRlQ2xpY2sodGhpcy4kaWNvbnNEaXYsIHRoaXMuaGlkZVBpY2tlcik7XG5cdH0sXG5cblx0aXNJblZpZXdwb3J0KGNhdCkge1xuXHRcdGNvbnN0IHZpZXdwb3J0VG9wID0gdGhpcy4kZm9udExpc3Quc2Nyb2xsVG9wKCk7XG5cdFx0Y29uc3Qgdmlld3BvcnRCb3R0b20gPSB2aWV3cG9ydFRvcCArIHRoaXMuJGZvbnRMaXN0LmhlaWdodCgpIC8gMjtcblxuXHRcdHJldHVybiBjYXQuYm90dG9tID4gdmlld3BvcnRUb3AgJiYgY2F0LnRvcCA8IHZpZXdwb3J0Qm90dG9tO1xuXHR9LFxuXG5cdGdldEljb25Qcm9wcyhpY29uQ2xhc3MpIHtcblx0XHRjb25zdCBjbGFzc2VzID0gW107XG5cdFx0aWYgKGljb25DbGFzcykge1xuXHRcdFx0Y2xhc3Nlcy5wdXNoKGljb25DbGFzcyk7XG5cdFx0XHQkLmVhY2godGhpcy4kY3VzdG9taXphdGlvbi5zZXJpYWxpemVBcnJheSgpLCAoaSwgZmllbGQpID0+IHtcblx0XHRcdFx0aWYgKGZpZWxkLnZhbHVlKSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGZpZWxkLnZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9LFxuXG5cdGluc2VydEljb24oaWNvbikge1xuXHRcdGlmICgkLmlzRW1wdHlPYmplY3QoY3VycmVudEl0ZW0pICE9PSB0cnVlKSB7XG5cdFx0XHRjb25zdCBpY29uQ2xhc3MgPSB0aGlzLmdldEljb25Qcm9wcyhpY29uKTtcblx0XHRcdGNvbnN0IGljb25IdG1sID0gaWNvbkNsYXNzXG5cdFx0XHRcdD8gYDxpIGNsYXNzPVwiJHtpY29uQ2xhc3N9XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPmBcblx0XHRcdFx0OiAnJztcblxuXHRcdFx0Y3VycmVudEl0ZW0uaHRtbChpY29uSHRtbCk7XG5cdFx0XHR0aGlzLm9wdGlvbnMub25TZWxlY3QuY2FsbCh0aGlzLCBjdXJyZW50SXRlbSwgaWNvbkNsYXNzLCBpY29uSHRtbCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5oaWRlUGlja2VyKCk7XG5cdH0sXG5cblx0cHJldmlld0ljb24oKSB7XG5cdFx0dGhpcy4kcHJldmlld1xuXHRcdFx0LmNoaWxkcmVuKCdpJylcblx0XHRcdC5hdHRyKCdjbGFzcycsIHRoaXMuZ2V0SWNvblByb3BzKHRoaXMuc2VsZWN0ZWRJY29uKSk7XG5cdH0sXG5cblx0c2VsZWN0SWNvbigkZWxlbWVudCkge1xuXHRcdHRoaXMuJGZvbnRMaXN0LmZpbmQoJ2EnKS5yZW1vdmVDbGFzcygnaWNvbi1zZWxlY3RlZCcpO1xuXHRcdHRoaXMuc2VsZWN0ZWRJY29uID0gJGVsZW1lbnQuYXR0cignY2xhc3MnKTtcblx0XHR0aGlzLnByZXZpZXdJY29uKHRoaXMuc2VsZWN0ZWRJY29uKTtcblx0XHQkZWxlbWVudC5wYXJlbnQoKS5hZGRDbGFzcygnaWNvbi1zZWxlY3RlZCcpO1xuXHR9LFxuXG5cdHNldEN1cnJlbnRJY29uKCRlbGVtZW50KSB7XG5cdFx0Y29uc3QgJGN1cnJJY29uID0gJGVsZW1lbnQuZmluZCgnaScpO1xuXHRcdGNvbnN0ICRzZXR0aW5ncyA9IHRoaXMuJGN1c3RvbWl6YXRpb25cblx0XHRcdC5maW5kKCc6aW5wdXQnKVxuXHRcdFx0LnJlbW92ZUF0dHIoJ2NoZWNrZWQnKVxuXHRcdFx0LnJlbW92ZUF0dHIoJ3NlbGVjdGVkJyk7XG5cblx0XHR0aGlzLiRjb2xvckJveGVzLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpO1xuXHRcdHRoaXMuJGZvbnRMaXN0LmZpbmQoJ2EnKS5yZW1vdmVDbGFzcygnaWNvbi1zZWxlY3RlZCcpO1xuXHRcdHRoaXMuc2VsZWN0ZWRJY29uID0gJyc7XG5cblx0XHRpZiAoJGN1cnJJY29uLmxlbmd0aCkge1xuXHRcdFx0Y29uc3QgaWNvbkluZm8gPSAkY3Vyckljb24uYXR0cignY2xhc3MnKS50cmltKCkuc3BsaXQoJyAnKTtcblx0XHRcdGNvbnN0IHByZWZpeCA9IGljb25JbmZvLnNoaWZ0KCk7XG5cblx0XHRcdGNvbnN0IGljb25DbGFzcyA9IGljb25JbmZvLnNoaWZ0KCk7XG5cdFx0XHRjb25zdCAkaWNvbiA9IHRoaXMuJGZvbnRMaXN0LmZpbmQoYC4ke2ljb25DbGFzc31gKS5lcSgwKTtcblxuXHRcdFx0aWYgKCRpY29uLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0JGljb24ucGFyZW50KCkuYWRkQ2xhc3MoJ2ljb24tc2VsZWN0ZWQnKTtcblxuXHRcdFx0XHR0aGlzLnNlbGVjdGVkSWNvbiA9IGAke3ByZWZpeH0gJHtpY29uQ2xhc3N9YDtcblx0XHRcdFx0dGhpcy5zY3JvbGxUb0ljb24oJGljb24sIHRydWUpO1xuXG5cdFx0XHRcdGNvbnN0ICRzZWxlY3RzID0gJHNldHRpbmdzLmZpbHRlcignc2VsZWN0JykuY2hpbGRyZW4oKTtcblx0XHRcdFx0Y29uc3QgJGlucHV0cyA9ICRzZXR0aW5ncy5ub3QoJ3NlbGVjdCcpO1xuXG5cdFx0XHRcdCQuZWFjaChpY29uSW5mbywgKGksIHZhbCkgPT4ge1xuXHRcdFx0XHRcdCRpbnB1dHMuZmlsdGVyKGBbdmFsdWU9JHt2YWx9XWApLmF0dHIoJ2NoZWNrZWQnLCB0cnVlKTtcblx0XHRcdFx0XHQkc2VsZWN0cy5maWx0ZXIoYFt2YWx1ZT0ke3ZhbH1dYCkucGFyZW50KCkudmFsKHZhbCk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGNvbnN0ICRjb2xvciA9IHRoaXMuJGN1c3RvbWl6YXRpb24uZmluZChcblx0XHRcdFx0XHQnaW5wdXRbbmFtZT1jb2xvcl06Y2hlY2tlZCcsXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0aWYgKCRjb2xvci5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0JGNvbG9yLnByZXYoKS5hZGRDbGFzcygnc2VsZWN0ZWQnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMucHJldmlld0ljb24oKTtcblx0fSxcblxuXHRzaG93UGlja2VyKCRlbGVtZW50KSB7XG5cdFx0Y29uc3QgcG9zID0gJGVsZW1lbnQub2Zmc2V0KCk7XG5cdFx0Y29uc3QgaGVpZ2h0ID0gJGVsZW1lbnQuaGVpZ2h0KCk7XG5cblx0XHQkZWxlbWVudC5yZW1vdmVDbGFzcygnaWNvbnMtZHJvcCcpO1xuXHRcdHRoaXMuJGljb25zRGl2LnNsaWRlRG93bigpLm9mZnNldCh7XG5cdFx0XHR0b3A6IHBvcy50b3AgKyBoZWlnaHQsXG5cdFx0XHRsZWZ0OiBwb3MubGVmdCAtIDE1LFxuXHRcdH0pO1xuXHRcdHRoaXMuc2V0Q3VycmVudEljb24oJGVsZW1lbnQpO1xuXHRcdHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcblx0XHRjdXJyZW50SXRlbSA9ICRlbGVtZW50LmFkZENsYXNzKCdpY29ucy1kcm9wJyk7XG5cdH0sXG5cblx0aGlkZVBpY2tlcigpIHtcblx0XHRpZiAodGhpcy4kZWxlbWVudCkge1xuXHRcdFx0dGhpcy4kaWNvbnNEaXYuc2xpZGVVcCgpO1xuXHRcdFx0dGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcygnaWNvbnMtZHJvcCcpO1xuXHRcdFx0dGhpcy4kZWxlbWVudCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH0sXG5cblx0c2Nyb2xsVG9JY29uOiBmdW5jdGlvbiBzY3JvbGxUb0ljb24oJGVsZW1lbnQsIGNlbnRlcikge1xuXHRcdGxldCBhZGp1c3RtZW50ID0gMDtcblx0XHRpZiAoY2VudGVyKSB7XG5cdFx0XHRhZGp1c3RtZW50ID0gLSh0aGlzLiRmb250TGlzdC5oZWlnaHQoKSAvIDIpO1xuXHRcdH1cblx0XHR0aGlzLiRmb250TGlzdC5hbmltYXRlKFxuXHRcdFx0e1xuXHRcdFx0XHRzY3JvbGxUb3A6XG5cdFx0XHRcdFx0dGhpcy4kZm9udExpc3Quc2Nyb2xsVG9wKCkgK1xuXHRcdFx0XHRcdCRlbGVtZW50LnBvc2l0aW9uKCkudG9wICtcblx0XHRcdFx0XHRhZGp1c3RtZW50LFxuXHRcdFx0fSxcblx0XHRcdDEwMDAsXG5cdFx0KTtcblx0fSxcblxuXHRkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuXHRcdHRoaXMuJGVsZW1lbnQuZGF0YShkYXRhUGx1Z2luLCBudWxsKTtcblx0fSxcbn07XG5cbiQuZm5bcGx1Z2luTmFtZV0gPSBmdW5jdGlvbiBwbHVnaW5JbnN0YW5jZShhcmcsIC4uLnJlc3QpIHtcblx0aWYgKCEodGhpcy5kYXRhKGRhdGFQbHVnaW4pIGluc3RhbmNlb2YgUGx1Z2luKSkge1xuXHRcdHRoaXMuZGF0YShkYXRhUGx1Z2luLCBuZXcgUGx1Z2luKHRoaXMpKTtcblx0fVxuXG5cdGNvbnN0IGluc3RhbmNlID0gdGhpcy5kYXRhKGRhdGFQbHVnaW4pO1xuXHRpZiAoaW5zdGFuY2UgIT09IHVuZGVmaW5lZCkge1xuXHRcdGluc3RhbmNlLmVsZW1lbnQgPSB0aGlzO1xuXG5cdFx0aWYgKHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBhcmcgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRpZiAodHlwZW9mIGluc3RhbmNlLmluaXQgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0aW5zdGFuY2UuaW5pdChhcmcpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoXG5cdFx0XHR0eXBlb2YgYXJnID09PSAnc3RyaW5nJyAmJlxuXHRcdFx0dHlwZW9mIGluc3RhbmNlW2FyZ10gPT09ICdmdW5jdGlvbidcblx0XHQpIHtcblx0XHRcdHJldHVybiBpbnN0YW5jZVthcmddKGFyZywgLi4ucmVzdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdCQuZXJyb3IoYE1ldGhvZCAke2FyZ30gZG9lcyBub3QgZXhpc3Qgb24galF1ZXJ5LiR7cGx1Z2luTmFtZX1gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHRoaXM7XG59O1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIiwiLyohXG4gKiBqUXVlcnkgVUkgVGFicyAxLjEyLjFcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbi8vPj5sYWJlbDogVGFic1xuLy8+Pmdyb3VwOiBXaWRnZXRzXG4vLz4+ZGVzY3JpcHRpb246IFRyYW5zZm9ybXMgYSBzZXQgb2YgY29udGFpbmVyIGVsZW1lbnRzIGludG8gYSB0YWIgc3RydWN0dXJlLlxuLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL3RhYnMvXG4vLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vdGFicy9cbi8vPj5jc3Muc3RydWN0dXJlOiAuLi8uLi90aGVtZXMvYmFzZS9jb3JlLmNzc1xuLy8+PmNzcy5zdHJ1Y3R1cmU6IC4uLy4uL3RoZW1lcy9iYXNlL3RhYnMuY3NzXG4vLz4+Y3NzLnRoZW1lOiAuLi8uLi90aGVtZXMvYmFzZS90aGVtZS5jc3NcblxuKCBmdW5jdGlvbiggZmFjdG9yeSApIHtcblx0aWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblxuXHRcdC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cblx0XHRkZWZpbmUoIFtcblx0XHRcdFwianF1ZXJ5XCIsXG5cdFx0XHRcIi4uL2VzY2FwZS1zZWxlY3RvclwiLFxuXHRcdFx0XCIuLi9rZXljb2RlXCIsXG5cdFx0XHRcIi4uL3NhZmUtYWN0aXZlLWVsZW1lbnRcIixcblx0XHRcdFwiLi4vdW5pcXVlLWlkXCIsXG5cdFx0XHRcIi4uL3ZlcnNpb25cIixcblx0XHRcdFwiLi4vd2lkZ2V0XCJcblx0XHRdLCBmYWN0b3J5ICk7XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBCcm93c2VyIGdsb2JhbHNcblx0XHRmYWN0b3J5KCBqUXVlcnkgKTtcblx0fVxufSggZnVuY3Rpb24oICQgKSB7XG5cbiQud2lkZ2V0KCBcInVpLnRhYnNcIiwge1xuXHR2ZXJzaW9uOiBcIjEuMTIuMVwiLFxuXHRkZWxheTogMzAwLFxuXHRvcHRpb25zOiB7XG5cdFx0YWN0aXZlOiBudWxsLFxuXHRcdGNsYXNzZXM6IHtcblx0XHRcdFwidWktdGFic1wiOiBcInVpLWNvcm5lci1hbGxcIixcblx0XHRcdFwidWktdGFicy1uYXZcIjogXCJ1aS1jb3JuZXItYWxsXCIsXG5cdFx0XHRcInVpLXRhYnMtcGFuZWxcIjogXCJ1aS1jb3JuZXItYm90dG9tXCIsXG5cdFx0XHRcInVpLXRhYnMtdGFiXCI6IFwidWktY29ybmVyLXRvcFwiXG5cdFx0fSxcblx0XHRjb2xsYXBzaWJsZTogZmFsc2UsXG5cdFx0ZXZlbnQ6IFwiY2xpY2tcIixcblx0XHRoZWlnaHRTdHlsZTogXCJjb250ZW50XCIsXG5cdFx0aGlkZTogbnVsbCxcblx0XHRzaG93OiBudWxsLFxuXG5cdFx0Ly8gQ2FsbGJhY2tzXG5cdFx0YWN0aXZhdGU6IG51bGwsXG5cdFx0YmVmb3JlQWN0aXZhdGU6IG51bGwsXG5cdFx0YmVmb3JlTG9hZDogbnVsbCxcblx0XHRsb2FkOiBudWxsXG5cdH0sXG5cblx0X2lzTG9jYWw6ICggZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHJoYXNoID0gLyMuKiQvO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKCBhbmNob3IgKSB7XG5cdFx0XHR2YXIgYW5jaG9yVXJsLCBsb2NhdGlvblVybDtcblxuXHRcdFx0YW5jaG9yVXJsID0gYW5jaG9yLmhyZWYucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblx0XHRcdGxvY2F0aW9uVXJsID0gbG9jYXRpb24uaHJlZi5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0XHQvLyBEZWNvZGluZyBtYXkgdGhyb3cgYW4gZXJyb3IgaWYgdGhlIFVSTCBpc24ndCBVVEYtOCAoIzk1MTgpXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRhbmNob3JVcmwgPSBkZWNvZGVVUklDb21wb25lbnQoIGFuY2hvclVybCApO1xuXHRcdFx0fSBjYXRjaCAoIGVycm9yICkge31cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGxvY2F0aW9uVXJsID0gZGVjb2RlVVJJQ29tcG9uZW50KCBsb2NhdGlvblVybCApO1xuXHRcdFx0fSBjYXRjaCAoIGVycm9yICkge31cblxuXHRcdFx0cmV0dXJuIGFuY2hvci5oYXNoLmxlbmd0aCA+IDEgJiYgYW5jaG9yVXJsID09PSBsb2NhdGlvblVybDtcblx0XHR9O1xuXHR9ICkoKSxcblxuXHRfY3JlYXRlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG5cdFx0dGhpcy5ydW5uaW5nID0gZmFsc2U7XG5cblx0XHR0aGlzLl9hZGRDbGFzcyggXCJ1aS10YWJzXCIsIFwidWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50XCIgKTtcblx0XHR0aGlzLl90b2dnbGVDbGFzcyggXCJ1aS10YWJzLWNvbGxhcHNpYmxlXCIsIG51bGwsIG9wdGlvbnMuY29sbGFwc2libGUgKTtcblxuXHRcdHRoaXMuX3Byb2Nlc3NUYWJzKCk7XG5cdFx0b3B0aW9ucy5hY3RpdmUgPSB0aGlzLl9pbml0aWFsQWN0aXZlKCk7XG5cblx0XHQvLyBUYWtlIGRpc2FibGluZyB0YWJzIHZpYSBjbGFzcyBhdHRyaWJ1dGUgZnJvbSBIVE1MXG5cdFx0Ly8gaW50byBhY2NvdW50IGFuZCB1cGRhdGUgb3B0aW9uIHByb3Blcmx5LlxuXHRcdGlmICggJC5pc0FycmF5KCBvcHRpb25zLmRpc2FibGVkICkgKSB7XG5cdFx0XHRvcHRpb25zLmRpc2FibGVkID0gJC51bmlxdWUoIG9wdGlvbnMuZGlzYWJsZWQuY29uY2F0KFxuXHRcdFx0XHQkLm1hcCggdGhpcy50YWJzLmZpbHRlciggXCIudWktc3RhdGUtZGlzYWJsZWRcIiApLCBmdW5jdGlvbiggbGkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoYXQudGFicy5pbmRleCggbGkgKTtcblx0XHRcdFx0fSApXG5cdFx0XHQpICkuc29ydCgpO1xuXHRcdH1cblxuXHRcdC8vIENoZWNrIGZvciBsZW5ndGggYXZvaWRzIGVycm9yIHdoZW4gaW5pdGlhbGl6aW5nIGVtcHR5IGxpc3Rcblx0XHRpZiAoIHRoaXMub3B0aW9ucy5hY3RpdmUgIT09IGZhbHNlICYmIHRoaXMuYW5jaG9ycy5sZW5ndGggKSB7XG5cdFx0XHR0aGlzLmFjdGl2ZSA9IHRoaXMuX2ZpbmRBY3RpdmUoIG9wdGlvbnMuYWN0aXZlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuYWN0aXZlID0gJCgpO1xuXHRcdH1cblxuXHRcdHRoaXMuX3JlZnJlc2goKTtcblxuXHRcdGlmICggdGhpcy5hY3RpdmUubGVuZ3RoICkge1xuXHRcdFx0dGhpcy5sb2FkKCBvcHRpb25zLmFjdGl2ZSApO1xuXHRcdH1cblx0fSxcblxuXHRfaW5pdGlhbEFjdGl2ZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGFjdGl2ZSA9IHRoaXMub3B0aW9ucy5hY3RpdmUsXG5cdFx0XHRjb2xsYXBzaWJsZSA9IHRoaXMub3B0aW9ucy5jb2xsYXBzaWJsZSxcblx0XHRcdGxvY2F0aW9uSGFzaCA9IGxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKCAxICk7XG5cblx0XHRpZiAoIGFjdGl2ZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gY2hlY2sgdGhlIGZyYWdtZW50IGlkZW50aWZpZXIgaW4gdGhlIFVSTFxuXHRcdFx0aWYgKCBsb2NhdGlvbkhhc2ggKSB7XG5cdFx0XHRcdHRoaXMudGFicy5lYWNoKCBmdW5jdGlvbiggaSwgdGFiICkge1xuXHRcdFx0XHRcdGlmICggJCggdGFiICkuYXR0ciggXCJhcmlhLWNvbnRyb2xzXCIgKSA9PT0gbG9jYXRpb25IYXNoICkge1xuXHRcdFx0XHRcdFx0YWN0aXZlID0gaTtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGEgdGFiIG1hcmtlZCBhY3RpdmUgdmlhIGEgY2xhc3Ncblx0XHRcdGlmICggYWN0aXZlID09PSBudWxsICkge1xuXHRcdFx0XHRhY3RpdmUgPSB0aGlzLnRhYnMuaW5kZXgoIHRoaXMudGFicy5maWx0ZXIoIFwiLnVpLXRhYnMtYWN0aXZlXCIgKSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBObyBhY3RpdmUgdGFiLCBzZXQgdG8gZmFsc2Vcblx0XHRcdGlmICggYWN0aXZlID09PSBudWxsIHx8IGFjdGl2ZSA9PT0gLTEgKSB7XG5cdFx0XHRcdGFjdGl2ZSA9IHRoaXMudGFicy5sZW5ndGggPyAwIDogZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG51bWJlcnM6IG5lZ2F0aXZlLCBvdXQgb2YgcmFuZ2Vcblx0XHRpZiAoIGFjdGl2ZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHRhY3RpdmUgPSB0aGlzLnRhYnMuaW5kZXgoIHRoaXMudGFicy5lcSggYWN0aXZlICkgKTtcblx0XHRcdGlmICggYWN0aXZlID09PSAtMSApIHtcblx0XHRcdFx0YWN0aXZlID0gY29sbGFwc2libGUgPyBmYWxzZSA6IDA7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRG9uJ3QgYWxsb3cgY29sbGFwc2libGU6IGZhbHNlIGFuZCBhY3RpdmU6IGZhbHNlXG5cdFx0aWYgKCAhY29sbGFwc2libGUgJiYgYWN0aXZlID09PSBmYWxzZSAmJiB0aGlzLmFuY2hvcnMubGVuZ3RoICkge1xuXHRcdFx0YWN0aXZlID0gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWN0aXZlO1xuXHR9LFxuXG5cdF9nZXRDcmVhdGVFdmVudERhdGE6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHR0YWI6IHRoaXMuYWN0aXZlLFxuXHRcdFx0cGFuZWw6ICF0aGlzLmFjdGl2ZS5sZW5ndGggPyAkKCkgOiB0aGlzLl9nZXRQYW5lbEZvclRhYiggdGhpcy5hY3RpdmUgKVxuXHRcdH07XG5cdH0sXG5cblx0X3RhYktleWRvd246IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgZm9jdXNlZFRhYiA9ICQoICQudWkuc2FmZUFjdGl2ZUVsZW1lbnQoIHRoaXMuZG9jdW1lbnRbIDAgXSApICkuY2xvc2VzdCggXCJsaVwiICksXG5cdFx0XHRzZWxlY3RlZEluZGV4ID0gdGhpcy50YWJzLmluZGV4KCBmb2N1c2VkVGFiICksXG5cdFx0XHRnb2luZ0ZvcndhcmQgPSB0cnVlO1xuXG5cdFx0aWYgKCB0aGlzLl9oYW5kbGVQYWdlTmF2KCBldmVudCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHN3aXRjaCAoIGV2ZW50LmtleUNvZGUgKSB7XG5cdFx0Y2FzZSAkLnVpLmtleUNvZGUuUklHSFQ6XG5cdFx0Y2FzZSAkLnVpLmtleUNvZGUuRE9XTjpcblx0XHRcdHNlbGVjdGVkSW5kZXgrKztcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJC51aS5rZXlDb2RlLlVQOlxuXHRcdGNhc2UgJC51aS5rZXlDb2RlLkxFRlQ6XG5cdFx0XHRnb2luZ0ZvcndhcmQgPSBmYWxzZTtcblx0XHRcdHNlbGVjdGVkSW5kZXgtLTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJC51aS5rZXlDb2RlLkVORDpcblx0XHRcdHNlbGVjdGVkSW5kZXggPSB0aGlzLmFuY2hvcnMubGVuZ3RoIC0gMTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJC51aS5rZXlDb2RlLkhPTUU6XG5cdFx0XHRzZWxlY3RlZEluZGV4ID0gMDtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJC51aS5rZXlDb2RlLlNQQUNFOlxuXG5cdFx0XHQvLyBBY3RpdmF0ZSBvbmx5LCBubyBjb2xsYXBzaW5nXG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0Y2xlYXJUaW1lb3V0KCB0aGlzLmFjdGl2YXRpbmcgKTtcblx0XHRcdHRoaXMuX2FjdGl2YXRlKCBzZWxlY3RlZEluZGV4ICk7XG5cdFx0XHRyZXR1cm47XG5cdFx0Y2FzZSAkLnVpLmtleUNvZGUuRU5URVI6XG5cblx0XHRcdC8vIFRvZ2dsZSAoY2FuY2VsIGRlbGF5ZWQgYWN0aXZhdGlvbiwgYWxsb3cgY29sbGFwc2luZylcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRjbGVhclRpbWVvdXQoIHRoaXMuYWN0aXZhdGluZyApO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgd2Ugc2hvdWxkIGNvbGxhcHNlIG9yIGFjdGl2YXRlXG5cdFx0XHR0aGlzLl9hY3RpdmF0ZSggc2VsZWN0ZWRJbmRleCA9PT0gdGhpcy5vcHRpb25zLmFjdGl2ZSA/IGZhbHNlIDogc2VsZWN0ZWRJbmRleCApO1xuXHRcdFx0cmV0dXJuO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRm9jdXMgdGhlIGFwcHJvcHJpYXRlIHRhYiwgYmFzZWQgb24gd2hpY2gga2V5IHdhcyBwcmVzc2VkXG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRjbGVhclRpbWVvdXQoIHRoaXMuYWN0aXZhdGluZyApO1xuXHRcdHNlbGVjdGVkSW5kZXggPSB0aGlzLl9mb2N1c05leHRUYWIoIHNlbGVjdGVkSW5kZXgsIGdvaW5nRm9yd2FyZCApO1xuXG5cdFx0Ly8gTmF2aWdhdGluZyB3aXRoIGNvbnRyb2wvY29tbWFuZCBrZXkgd2lsbCBwcmV2ZW50IGF1dG9tYXRpYyBhY3RpdmF0aW9uXG5cdFx0aWYgKCAhZXZlbnQuY3RybEtleSAmJiAhZXZlbnQubWV0YUtleSApIHtcblxuXHRcdFx0Ly8gVXBkYXRlIGFyaWEtc2VsZWN0ZWQgaW1tZWRpYXRlbHkgc28gdGhhdCBBVCB0aGluayB0aGUgdGFiIGlzIGFscmVhZHkgc2VsZWN0ZWQuXG5cdFx0XHQvLyBPdGhlcndpc2UgQVQgbWF5IGNvbmZ1c2UgdGhlIHVzZXIgYnkgc3RhdGluZyB0aGF0IHRoZXkgbmVlZCB0byBhY3RpdmF0ZSB0aGUgdGFiLFxuXHRcdFx0Ly8gYnV0IHRoZSB0YWIgd2lsbCBhbHJlYWR5IGJlIGFjdGl2YXRlZCBieSB0aGUgdGltZSB0aGUgYW5ub3VuY2VtZW50IGZpbmlzaGVzLlxuXHRcdFx0Zm9jdXNlZFRhYi5hdHRyKCBcImFyaWEtc2VsZWN0ZWRcIiwgXCJmYWxzZVwiICk7XG5cdFx0XHR0aGlzLnRhYnMuZXEoIHNlbGVjdGVkSW5kZXggKS5hdHRyKCBcImFyaWEtc2VsZWN0ZWRcIiwgXCJ0cnVlXCIgKTtcblxuXHRcdFx0dGhpcy5hY3RpdmF0aW5nID0gdGhpcy5fZGVsYXkoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR0aGlzLm9wdGlvbiggXCJhY3RpdmVcIiwgc2VsZWN0ZWRJbmRleCApO1xuXHRcdFx0fSwgdGhpcy5kZWxheSApO1xuXHRcdH1cblx0fSxcblxuXHRfcGFuZWxLZXlkb3duOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0aWYgKCB0aGlzLl9oYW5kbGVQYWdlTmF2KCBldmVudCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEN0cmwrdXAgbW92ZXMgZm9jdXMgdG8gdGhlIGN1cnJlbnQgdGFiXG5cdFx0aWYgKCBldmVudC5jdHJsS2V5ICYmIGV2ZW50LmtleUNvZGUgPT09ICQudWkua2V5Q29kZS5VUCApIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR0aGlzLmFjdGl2ZS50cmlnZ2VyKCBcImZvY3VzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gQWx0K3BhZ2UgdXAvZG93biBtb3ZlcyBmb2N1cyB0byB0aGUgcHJldmlvdXMvbmV4dCB0YWIgKGFuZCBhY3RpdmF0ZXMpXG5cdF9oYW5kbGVQYWdlTmF2OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0aWYgKCBldmVudC5hbHRLZXkgJiYgZXZlbnQua2V5Q29kZSA9PT0gJC51aS5rZXlDb2RlLlBBR0VfVVAgKSB7XG5cdFx0XHR0aGlzLl9hY3RpdmF0ZSggdGhpcy5fZm9jdXNOZXh0VGFiKCB0aGlzLm9wdGlvbnMuYWN0aXZlIC0gMSwgZmFsc2UgKSApO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdGlmICggZXZlbnQuYWx0S2V5ICYmIGV2ZW50LmtleUNvZGUgPT09ICQudWkua2V5Q29kZS5QQUdFX0RPV04gKSB7XG5cdFx0XHR0aGlzLl9hY3RpdmF0ZSggdGhpcy5fZm9jdXNOZXh0VGFiKCB0aGlzLm9wdGlvbnMuYWN0aXZlICsgMSwgdHJ1ZSApICk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdH0sXG5cblx0X2ZpbmROZXh0VGFiOiBmdW5jdGlvbiggaW5kZXgsIGdvaW5nRm9yd2FyZCApIHtcblx0XHR2YXIgbGFzdFRhYkluZGV4ID0gdGhpcy50YWJzLmxlbmd0aCAtIDE7XG5cblx0XHRmdW5jdGlvbiBjb25zdHJhaW4oKSB7XG5cdFx0XHRpZiAoIGluZGV4ID4gbGFzdFRhYkluZGV4ICkge1xuXHRcdFx0XHRpbmRleCA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0aW5kZXggPSBsYXN0VGFiSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gaW5kZXg7XG5cdFx0fVxuXG5cdFx0d2hpbGUgKCAkLmluQXJyYXkoIGNvbnN0cmFpbigpLCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgKSAhPT0gLTEgKSB7XG5cdFx0XHRpbmRleCA9IGdvaW5nRm9yd2FyZCA/IGluZGV4ICsgMSA6IGluZGV4IC0gMTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaW5kZXg7XG5cdH0sXG5cblx0X2ZvY3VzTmV4dFRhYjogZnVuY3Rpb24oIGluZGV4LCBnb2luZ0ZvcndhcmQgKSB7XG5cdFx0aW5kZXggPSB0aGlzLl9maW5kTmV4dFRhYiggaW5kZXgsIGdvaW5nRm9yd2FyZCApO1xuXHRcdHRoaXMudGFicy5lcSggaW5kZXggKS50cmlnZ2VyKCBcImZvY3VzXCIgKTtcblx0XHRyZXR1cm4gaW5kZXg7XG5cdH0sXG5cblx0X3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0aWYgKCBrZXkgPT09IFwiYWN0aXZlXCIgKSB7XG5cblx0XHRcdC8vIF9hY3RpdmF0ZSgpIHdpbGwgaGFuZGxlIGludmFsaWQgdmFsdWVzIGFuZCB1cGRhdGUgdGhpcy5vcHRpb25zXG5cdFx0XHR0aGlzLl9hY3RpdmF0ZSggdmFsdWUgKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLl9zdXBlcigga2V5LCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBrZXkgPT09IFwiY29sbGFwc2libGVcIiApIHtcblx0XHRcdHRoaXMuX3RvZ2dsZUNsYXNzKCBcInVpLXRhYnMtY29sbGFwc2libGVcIiwgbnVsbCwgdmFsdWUgKTtcblxuXHRcdFx0Ly8gU2V0dGluZyBjb2xsYXBzaWJsZTogZmFsc2Ugd2hpbGUgY29sbGFwc2VkOyBvcGVuIGZpcnN0IHBhbmVsXG5cdFx0XHRpZiAoICF2YWx1ZSAmJiB0aGlzLm9wdGlvbnMuYWN0aXZlID09PSBmYWxzZSApIHtcblx0XHRcdFx0dGhpcy5fYWN0aXZhdGUoIDAgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGtleSA9PT0gXCJldmVudFwiICkge1xuXHRcdFx0dGhpcy5fc2V0dXBFdmVudHMoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgPT09IFwiaGVpZ2h0U3R5bGVcIiApIHtcblx0XHRcdHRoaXMuX3NldHVwSGVpZ2h0U3R5bGUoIHZhbHVlICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9zYW5pdGl6ZVNlbGVjdG9yOiBmdW5jdGlvbiggaGFzaCApIHtcblx0XHRyZXR1cm4gaGFzaCA/IGhhc2gucmVwbGFjZSggL1shXCIkJSYnKCkqKywuXFwvOjs8PT4/QFxcW1xcXVxcXmB7fH1+XS9nLCBcIlxcXFwkJlwiICkgOiBcIlwiO1xuXHR9LFxuXG5cdHJlZnJlc2g6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuXHRcdFx0bGlzID0gdGhpcy50YWJsaXN0LmNoaWxkcmVuKCBcIjpoYXMoYVtocmVmXSlcIiApO1xuXG5cdFx0Ly8gR2V0IGRpc2FibGVkIHRhYnMgZnJvbSBjbGFzcyBhdHRyaWJ1dGUgZnJvbSBIVE1MXG5cdFx0Ly8gdGhpcyB3aWxsIGdldCBjb252ZXJ0ZWQgdG8gYSBib29sZWFuIGlmIG5lZWRlZCBpbiBfcmVmcmVzaCgpXG5cdFx0b3B0aW9ucy5kaXNhYmxlZCA9ICQubWFwKCBsaXMuZmlsdGVyKCBcIi51aS1zdGF0ZS1kaXNhYmxlZFwiICksIGZ1bmN0aW9uKCB0YWIgKSB7XG5cdFx0XHRyZXR1cm4gbGlzLmluZGV4KCB0YWIgKTtcblx0XHR9ICk7XG5cblx0XHR0aGlzLl9wcm9jZXNzVGFicygpO1xuXG5cdFx0Ly8gV2FzIGNvbGxhcHNlZCBvciBubyB0YWJzXG5cdFx0aWYgKCBvcHRpb25zLmFjdGl2ZSA9PT0gZmFsc2UgfHwgIXRoaXMuYW5jaG9ycy5sZW5ndGggKSB7XG5cdFx0XHRvcHRpb25zLmFjdGl2ZSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5hY3RpdmUgPSAkKCk7XG5cblx0XHQvLyB3YXMgYWN0aXZlLCBidXQgYWN0aXZlIHRhYiBpcyBnb25lXG5cdFx0fSBlbHNlIGlmICggdGhpcy5hY3RpdmUubGVuZ3RoICYmICEkLmNvbnRhaW5zKCB0aGlzLnRhYmxpc3RbIDAgXSwgdGhpcy5hY3RpdmVbIDAgXSApICkge1xuXG5cdFx0XHQvLyBhbGwgcmVtYWluaW5nIHRhYnMgYXJlIGRpc2FibGVkXG5cdFx0XHRpZiAoIHRoaXMudGFicy5sZW5ndGggPT09IG9wdGlvbnMuZGlzYWJsZWQubGVuZ3RoICkge1xuXHRcdFx0XHRvcHRpb25zLmFjdGl2ZSA9IGZhbHNlO1xuXHRcdFx0XHR0aGlzLmFjdGl2ZSA9ICQoKTtcblxuXHRcdFx0Ly8gYWN0aXZhdGUgcHJldmlvdXMgdGFiXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLl9hY3RpdmF0ZSggdGhpcy5fZmluZE5leHRUYWIoIE1hdGgubWF4KCAwLCBvcHRpb25zLmFjdGl2ZSAtIDEgKSwgZmFsc2UgKSApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gd2FzIGFjdGl2ZSwgYWN0aXZlIHRhYiBzdGlsbCBleGlzdHNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBtYWtlIHN1cmUgYWN0aXZlIGluZGV4IGlzIGNvcnJlY3Rcblx0XHRcdG9wdGlvbnMuYWN0aXZlID0gdGhpcy50YWJzLmluZGV4KCB0aGlzLmFjdGl2ZSApO1xuXHRcdH1cblxuXHRcdHRoaXMuX3JlZnJlc2goKTtcblx0fSxcblxuXHRfcmVmcmVzaDogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5fc2V0T3B0aW9uRGlzYWJsZWQoIHRoaXMub3B0aW9ucy5kaXNhYmxlZCApO1xuXHRcdHRoaXMuX3NldHVwRXZlbnRzKCB0aGlzLm9wdGlvbnMuZXZlbnQgKTtcblx0XHR0aGlzLl9zZXR1cEhlaWdodFN0eWxlKCB0aGlzLm9wdGlvbnMuaGVpZ2h0U3R5bGUgKTtcblxuXHRcdHRoaXMudGFicy5ub3QoIHRoaXMuYWN0aXZlICkuYXR0cigge1xuXHRcdFx0XCJhcmlhLXNlbGVjdGVkXCI6IFwiZmFsc2VcIixcblx0XHRcdFwiYXJpYS1leHBhbmRlZFwiOiBcImZhbHNlXCIsXG5cdFx0XHR0YWJJbmRleDogLTFcblx0XHR9ICk7XG5cdFx0dGhpcy5wYW5lbHMubm90KCB0aGlzLl9nZXRQYW5lbEZvclRhYiggdGhpcy5hY3RpdmUgKSApXG5cdFx0XHQuaGlkZSgpXG5cdFx0XHQuYXR0cigge1xuXHRcdFx0XHRcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiXG5cdFx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgb25lIHRhYiBpcyBpbiB0aGUgdGFiIG9yZGVyXG5cdFx0aWYgKCAhdGhpcy5hY3RpdmUubGVuZ3RoICkge1xuXHRcdFx0dGhpcy50YWJzLmVxKCAwICkuYXR0ciggXCJ0YWJJbmRleFwiLCAwICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuYWN0aXZlXG5cdFx0XHRcdC5hdHRyKCB7XG5cdFx0XHRcdFx0XCJhcmlhLXNlbGVjdGVkXCI6IFwidHJ1ZVwiLFxuXHRcdFx0XHRcdFwiYXJpYS1leHBhbmRlZFwiOiBcInRydWVcIixcblx0XHRcdFx0XHR0YWJJbmRleDogMFxuXHRcdFx0XHR9ICk7XG5cdFx0XHR0aGlzLl9hZGRDbGFzcyggdGhpcy5hY3RpdmUsIFwidWktdGFicy1hY3RpdmVcIiwgXCJ1aS1zdGF0ZS1hY3RpdmVcIiApO1xuXHRcdFx0dGhpcy5fZ2V0UGFuZWxGb3JUYWIoIHRoaXMuYWN0aXZlIClcblx0XHRcdFx0LnNob3coKVxuXHRcdFx0XHQuYXR0cigge1xuXHRcdFx0XHRcdFwiYXJpYS1oaWRkZW5cIjogXCJmYWxzZVwiXG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cdH0sXG5cblx0X3Byb2Nlc3NUYWJzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRwcmV2VGFicyA9IHRoaXMudGFicyxcblx0XHRcdHByZXZBbmNob3JzID0gdGhpcy5hbmNob3JzLFxuXHRcdFx0cHJldlBhbmVscyA9IHRoaXMucGFuZWxzO1xuXG5cdFx0dGhpcy50YWJsaXN0ID0gdGhpcy5fZ2V0TGlzdCgpLmF0dHIoIFwicm9sZVwiLCBcInRhYmxpc3RcIiApO1xuXHRcdHRoaXMuX2FkZENsYXNzKCB0aGlzLnRhYmxpc3QsIFwidWktdGFicy1uYXZcIixcblx0XHRcdFwidWktaGVscGVyLXJlc2V0IHVpLWhlbHBlci1jbGVhcmZpeCB1aS13aWRnZXQtaGVhZGVyXCIgKTtcblxuXHRcdC8vIFByZXZlbnQgdXNlcnMgZnJvbSBmb2N1c2luZyBkaXNhYmxlZCB0YWJzIHZpYSBjbGlja1xuXHRcdHRoaXMudGFibGlzdFxuXHRcdFx0Lm9uKCBcIm1vdXNlZG93blwiICsgdGhpcy5ldmVudE5hbWVzcGFjZSwgXCI+IGxpXCIsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0aWYgKCAkKCB0aGlzICkuaXMoIFwiLnVpLXN0YXRlLWRpc2FibGVkXCIgKSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IClcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPDlcblx0XHRcdC8vIFByZXZlbnRpbmcgdGhlIGRlZmF1bHQgYWN0aW9uIGluIG1vdXNlZG93biBkb2Vzbid0IHByZXZlbnQgSUVcblx0XHRcdC8vIGZyb20gZm9jdXNpbmcgdGhlIGVsZW1lbnQsIHNvIGlmIHRoZSBhbmNob3IgZ2V0cyBmb2N1c2VkLCBibHVyLlxuXHRcdFx0Ly8gV2UgZG9uJ3QgaGF2ZSB0byB3b3JyeSBhYm91dCBmb2N1c2luZyB0aGUgcHJldmlvdXNseSBmb2N1c2VkXG5cdFx0XHQvLyBlbGVtZW50IHNpbmNlIGNsaWNraW5nIG9uIGEgbm9uLWZvY3VzYWJsZSBlbGVtZW50IHNob3VsZCBmb2N1c1xuXHRcdFx0Ly8gdGhlIGJvZHkgYW55d2F5LlxuXHRcdFx0Lm9uKCBcImZvY3VzXCIgKyB0aGlzLmV2ZW50TmFtZXNwYWNlLCBcIi51aS10YWJzLWFuY2hvclwiLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAkKCB0aGlzICkuY2xvc2VzdCggXCJsaVwiICkuaXMoIFwiLnVpLXN0YXRlLWRpc2FibGVkXCIgKSApIHtcblx0XHRcdFx0XHR0aGlzLmJsdXIoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXG5cdFx0dGhpcy50YWJzID0gdGhpcy50YWJsaXN0LmZpbmQoIFwiPiBsaTpoYXMoYVtocmVmXSlcIiApXG5cdFx0XHQuYXR0cigge1xuXHRcdFx0XHRyb2xlOiBcInRhYlwiLFxuXHRcdFx0XHR0YWJJbmRleDogLTFcblx0XHRcdH0gKTtcblx0XHR0aGlzLl9hZGRDbGFzcyggdGhpcy50YWJzLCBcInVpLXRhYnMtdGFiXCIsIFwidWktc3RhdGUtZGVmYXVsdFwiICk7XG5cblx0XHR0aGlzLmFuY2hvcnMgPSB0aGlzLnRhYnMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiAkKCBcImFcIiwgdGhpcyApWyAwIF07XG5cdFx0fSApXG5cdFx0XHQuYXR0cigge1xuXHRcdFx0XHRyb2xlOiBcInByZXNlbnRhdGlvblwiLFxuXHRcdFx0XHR0YWJJbmRleDogLTFcblx0XHRcdH0gKTtcblx0XHR0aGlzLl9hZGRDbGFzcyggdGhpcy5hbmNob3JzLCBcInVpLXRhYnMtYW5jaG9yXCIgKTtcblxuXHRcdHRoaXMucGFuZWxzID0gJCgpO1xuXG5cdFx0dGhpcy5hbmNob3JzLmVhY2goIGZ1bmN0aW9uKCBpLCBhbmNob3IgKSB7XG5cdFx0XHR2YXIgc2VsZWN0b3IsIHBhbmVsLCBwYW5lbElkLFxuXHRcdFx0XHRhbmNob3JJZCA9ICQoIGFuY2hvciApLnVuaXF1ZUlkKCkuYXR0ciggXCJpZFwiICksXG5cdFx0XHRcdHRhYiA9ICQoIGFuY2hvciApLmNsb3Nlc3QoIFwibGlcIiApLFxuXHRcdFx0XHRvcmlnaW5hbEFyaWFDb250cm9scyA9IHRhYi5hdHRyKCBcImFyaWEtY29udHJvbHNcIiApO1xuXG5cdFx0XHQvLyBJbmxpbmUgdGFiXG5cdFx0XHRpZiAoIHRoYXQuX2lzTG9jYWwoIGFuY2hvciApICkge1xuXHRcdFx0XHRzZWxlY3RvciA9IGFuY2hvci5oYXNoO1xuXHRcdFx0XHRwYW5lbElkID0gc2VsZWN0b3Iuc3Vic3RyaW5nKCAxICk7XG5cdFx0XHRcdHBhbmVsID0gdGhhdC5lbGVtZW50LmZpbmQoIHRoYXQuX3Nhbml0aXplU2VsZWN0b3IoIHNlbGVjdG9yICkgKTtcblxuXHRcdFx0Ly8gcmVtb3RlIHRhYlxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJZiB0aGUgdGFiIGRvZXNuJ3QgYWxyZWFkeSBoYXZlIGFyaWEtY29udHJvbHMsXG5cdFx0XHRcdC8vIGdlbmVyYXRlIGFuIGlkIGJ5IHVzaW5nIGEgdGhyb3ctYXdheSBlbGVtZW50XG5cdFx0XHRcdHBhbmVsSWQgPSB0YWIuYXR0ciggXCJhcmlhLWNvbnRyb2xzXCIgKSB8fCAkKCB7fSApLnVuaXF1ZUlkKClbIDAgXS5pZDtcblx0XHRcdFx0c2VsZWN0b3IgPSBcIiNcIiArIHBhbmVsSWQ7XG5cdFx0XHRcdHBhbmVsID0gdGhhdC5lbGVtZW50LmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHRcdGlmICggIXBhbmVsLmxlbmd0aCApIHtcblx0XHRcdFx0XHRwYW5lbCA9IHRoYXQuX2NyZWF0ZVBhbmVsKCBwYW5lbElkICk7XG5cdFx0XHRcdFx0cGFuZWwuaW5zZXJ0QWZ0ZXIoIHRoYXQucGFuZWxzWyBpIC0gMSBdIHx8IHRoYXQudGFibGlzdCApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHBhbmVsLmF0dHIoIFwiYXJpYS1saXZlXCIsIFwicG9saXRlXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBwYW5lbC5sZW5ndGggKSB7XG5cdFx0XHRcdHRoYXQucGFuZWxzID0gdGhhdC5wYW5lbHMuYWRkKCBwYW5lbCApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvcmlnaW5hbEFyaWFDb250cm9scyApIHtcblx0XHRcdFx0dGFiLmRhdGEoIFwidWktdGFicy1hcmlhLWNvbnRyb2xzXCIsIG9yaWdpbmFsQXJpYUNvbnRyb2xzICk7XG5cdFx0XHR9XG5cdFx0XHR0YWIuYXR0cigge1xuXHRcdFx0XHRcImFyaWEtY29udHJvbHNcIjogcGFuZWxJZCxcblx0XHRcdFx0XCJhcmlhLWxhYmVsbGVkYnlcIjogYW5jaG9ySWRcblx0XHRcdH0gKTtcblx0XHRcdHBhbmVsLmF0dHIoIFwiYXJpYS1sYWJlbGxlZGJ5XCIsIGFuY2hvcklkICk7XG5cdFx0fSApO1xuXG5cdFx0dGhpcy5wYW5lbHMuYXR0ciggXCJyb2xlXCIsIFwidGFicGFuZWxcIiApO1xuXHRcdHRoaXMuX2FkZENsYXNzKCB0aGlzLnBhbmVscywgXCJ1aS10YWJzLXBhbmVsXCIsIFwidWktd2lkZ2V0LWNvbnRlbnRcIiApO1xuXG5cdFx0Ly8gQXZvaWQgbWVtb3J5IGxlYWtzICgjMTAwNTYpXG5cdFx0aWYgKCBwcmV2VGFicyApIHtcblx0XHRcdHRoaXMuX29mZiggcHJldlRhYnMubm90KCB0aGlzLnRhYnMgKSApO1xuXHRcdFx0dGhpcy5fb2ZmKCBwcmV2QW5jaG9ycy5ub3QoIHRoaXMuYW5jaG9ycyApICk7XG5cdFx0XHR0aGlzLl9vZmYoIHByZXZQYW5lbHMubm90KCB0aGlzLnBhbmVscyApICk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIEFsbG93IG92ZXJyaWRpbmcgaG93IHRvIGZpbmQgdGhlIGxpc3QgZm9yIHJhcmUgdXNhZ2Ugc2NlbmFyaW9zICgjNzcxNSlcblx0X2dldExpc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnRhYmxpc3QgfHwgdGhpcy5lbGVtZW50LmZpbmQoIFwib2wsIHVsXCIgKS5lcSggMCApO1xuXHR9LFxuXG5cdF9jcmVhdGVQYW5lbDogZnVuY3Rpb24oIGlkICkge1xuXHRcdHJldHVybiAkKCBcIjxkaXY+XCIgKVxuXHRcdFx0LmF0dHIoIFwiaWRcIiwgaWQgKVxuXHRcdFx0LmRhdGEoIFwidWktdGFicy1kZXN0cm95XCIsIHRydWUgKTtcblx0fSxcblxuXHRfc2V0T3B0aW9uRGlzYWJsZWQ6IGZ1bmN0aW9uKCBkaXNhYmxlZCApIHtcblx0XHR2YXIgY3VycmVudEl0ZW0sIGxpLCBpO1xuXG5cdFx0aWYgKCAkLmlzQXJyYXkoIGRpc2FibGVkICkgKSB7XG5cdFx0XHRpZiAoICFkaXNhYmxlZC5sZW5ndGggKSB7XG5cdFx0XHRcdGRpc2FibGVkID0gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBkaXNhYmxlZC5sZW5ndGggPT09IHRoaXMuYW5jaG9ycy5sZW5ndGggKSB7XG5cdFx0XHRcdGRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBEaXNhYmxlIHRhYnNcblx0XHRmb3IgKCBpID0gMDsgKCBsaSA9IHRoaXMudGFic1sgaSBdICk7IGkrKyApIHtcblx0XHRcdGN1cnJlbnRJdGVtID0gJCggbGkgKTtcblx0XHRcdGlmICggZGlzYWJsZWQgPT09IHRydWUgfHwgJC5pbkFycmF5KCBpLCBkaXNhYmxlZCApICE9PSAtMSApIHtcblx0XHRcdFx0Y3VycmVudEl0ZW0uYXR0ciggXCJhcmlhLWRpc2FibGVkXCIsIFwidHJ1ZVwiICk7XG5cdFx0XHRcdHRoaXMuX2FkZENsYXNzKCBjdXJyZW50SXRlbSwgbnVsbCwgXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjdXJyZW50SXRlbS5yZW1vdmVBdHRyKCBcImFyaWEtZGlzYWJsZWRcIiApO1xuXHRcdFx0XHR0aGlzLl9yZW1vdmVDbGFzcyggY3VycmVudEl0ZW0sIG51bGwsIFwidWktc3RhdGUtZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMub3B0aW9ucy5kaXNhYmxlZCA9IGRpc2FibGVkO1xuXG5cdFx0dGhpcy5fdG9nZ2xlQ2xhc3MoIHRoaXMud2lkZ2V0KCksIHRoaXMud2lkZ2V0RnVsbE5hbWUgKyBcIi1kaXNhYmxlZFwiLCBudWxsLFxuXHRcdFx0ZGlzYWJsZWQgPT09IHRydWUgKTtcblx0fSxcblxuXHRfc2V0dXBFdmVudHM6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgZXZlbnRzID0ge307XG5cdFx0aWYgKCBldmVudCApIHtcblx0XHRcdCQuZWFjaCggZXZlbnQuc3BsaXQoIFwiIFwiICksIGZ1bmN0aW9uKCBpbmRleCwgZXZlbnROYW1lICkge1xuXHRcdFx0XHRldmVudHNbIGV2ZW50TmFtZSBdID0gXCJfZXZlbnRIYW5kbGVyXCI7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fb2ZmKCB0aGlzLmFuY2hvcnMuYWRkKCB0aGlzLnRhYnMgKS5hZGQoIHRoaXMucGFuZWxzICkgKTtcblxuXHRcdC8vIEFsd2F5cyBwcmV2ZW50IHRoZSBkZWZhdWx0IGFjdGlvbiwgZXZlbiB3aGVuIGRpc2FibGVkXG5cdFx0dGhpcy5fb24oIHRydWUsIHRoaXMuYW5jaG9ycywge1xuXHRcdFx0Y2xpY2s6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0dGhpcy5fb24oIHRoaXMuYW5jaG9ycywgZXZlbnRzICk7XG5cdFx0dGhpcy5fb24oIHRoaXMudGFicywgeyBrZXlkb3duOiBcIl90YWJLZXlkb3duXCIgfSApO1xuXHRcdHRoaXMuX29uKCB0aGlzLnBhbmVscywgeyBrZXlkb3duOiBcIl9wYW5lbEtleWRvd25cIiB9ICk7XG5cblx0XHR0aGlzLl9mb2N1c2FibGUoIHRoaXMudGFicyApO1xuXHRcdHRoaXMuX2hvdmVyYWJsZSggdGhpcy50YWJzICk7XG5cdH0sXG5cblx0X3NldHVwSGVpZ2h0U3R5bGU6IGZ1bmN0aW9uKCBoZWlnaHRTdHlsZSApIHtcblx0XHR2YXIgbWF4SGVpZ2h0LFxuXHRcdFx0cGFyZW50ID0gdGhpcy5lbGVtZW50LnBhcmVudCgpO1xuXG5cdFx0aWYgKCBoZWlnaHRTdHlsZSA9PT0gXCJmaWxsXCIgKSB7XG5cdFx0XHRtYXhIZWlnaHQgPSBwYXJlbnQuaGVpZ2h0KCk7XG5cdFx0XHRtYXhIZWlnaHQgLT0gdGhpcy5lbGVtZW50Lm91dGVySGVpZ2h0KCkgLSB0aGlzLmVsZW1lbnQuaGVpZ2h0KCk7XG5cblx0XHRcdHRoaXMuZWxlbWVudC5zaWJsaW5ncyggXCI6dmlzaWJsZVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gJCggdGhpcyApLFxuXHRcdFx0XHRcdHBvc2l0aW9uID0gZWxlbS5jc3MoIFwicG9zaXRpb25cIiApO1xuXG5cdFx0XHRcdGlmICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRtYXhIZWlnaHQgLT0gZWxlbS5vdXRlckhlaWdodCggdHJ1ZSApO1xuXHRcdFx0fSApO1xuXG5cdFx0XHR0aGlzLmVsZW1lbnQuY2hpbGRyZW4oKS5ub3QoIHRoaXMucGFuZWxzICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdG1heEhlaWdodCAtPSAkKCB0aGlzICkub3V0ZXJIZWlnaHQoIHRydWUgKTtcblx0XHRcdH0gKTtcblxuXHRcdFx0dGhpcy5wYW5lbHMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdCQoIHRoaXMgKS5oZWlnaHQoIE1hdGgubWF4KCAwLCBtYXhIZWlnaHQgLVxuXHRcdFx0XHRcdCQoIHRoaXMgKS5pbm5lckhlaWdodCgpICsgJCggdGhpcyApLmhlaWdodCgpICkgKTtcblx0XHRcdH0gKVxuXHRcdFx0XHQuY3NzKCBcIm92ZXJmbG93XCIsIFwiYXV0b1wiICk7XG5cdFx0fSBlbHNlIGlmICggaGVpZ2h0U3R5bGUgPT09IFwiYXV0b1wiICkge1xuXHRcdFx0bWF4SGVpZ2h0ID0gMDtcblx0XHRcdHRoaXMucGFuZWxzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRtYXhIZWlnaHQgPSBNYXRoLm1heCggbWF4SGVpZ2h0LCAkKCB0aGlzICkuaGVpZ2h0KCBcIlwiICkuaGVpZ2h0KCkgKTtcblx0XHRcdH0gKS5oZWlnaHQoIG1heEhlaWdodCApO1xuXHRcdH1cblx0fSxcblxuXHRfZXZlbnRIYW5kbGVyOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG5cdFx0XHRhY3RpdmUgPSB0aGlzLmFjdGl2ZSxcblx0XHRcdGFuY2hvciA9ICQoIGV2ZW50LmN1cnJlbnRUYXJnZXQgKSxcblx0XHRcdHRhYiA9IGFuY2hvci5jbG9zZXN0KCBcImxpXCIgKSxcblx0XHRcdGNsaWNrZWRJc0FjdGl2ZSA9IHRhYlsgMCBdID09PSBhY3RpdmVbIDAgXSxcblx0XHRcdGNvbGxhcHNpbmcgPSBjbGlja2VkSXNBY3RpdmUgJiYgb3B0aW9ucy5jb2xsYXBzaWJsZSxcblx0XHRcdHRvU2hvdyA9IGNvbGxhcHNpbmcgPyAkKCkgOiB0aGlzLl9nZXRQYW5lbEZvclRhYiggdGFiICksXG5cdFx0XHR0b0hpZGUgPSAhYWN0aXZlLmxlbmd0aCA/ICQoKSA6IHRoaXMuX2dldFBhbmVsRm9yVGFiKCBhY3RpdmUgKSxcblx0XHRcdGV2ZW50RGF0YSA9IHtcblx0XHRcdFx0b2xkVGFiOiBhY3RpdmUsXG5cdFx0XHRcdG9sZFBhbmVsOiB0b0hpZGUsXG5cdFx0XHRcdG5ld1RhYjogY29sbGFwc2luZyA/ICQoKSA6IHRhYixcblx0XHRcdFx0bmV3UGFuZWw6IHRvU2hvd1xuXHRcdFx0fTtcblxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRpZiAoIHRhYi5oYXNDbGFzcyggXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiICkgfHxcblxuXHRcdFx0XHQvLyB0YWIgaXMgYWxyZWFkeSBsb2FkaW5nXG5cdFx0XHRcdHRhYi5oYXNDbGFzcyggXCJ1aS10YWJzLWxvYWRpbmdcIiApIHx8XG5cblx0XHRcdFx0Ly8gY2FuJ3Qgc3dpdGNoIGR1cm5pbmcgYW4gYW5pbWF0aW9uXG5cdFx0XHRcdHRoaXMucnVubmluZyB8fFxuXG5cdFx0XHRcdC8vIGNsaWNrIG9uIGFjdGl2ZSBoZWFkZXIsIGJ1dCBub3QgY29sbGFwc2libGVcblx0XHRcdFx0KCBjbGlja2VkSXNBY3RpdmUgJiYgIW9wdGlvbnMuY29sbGFwc2libGUgKSB8fFxuXG5cdFx0XHRcdC8vIGFsbG93IGNhbmNlbGluZyBhY3RpdmF0aW9uXG5cdFx0XHRcdCggdGhpcy5fdHJpZ2dlciggXCJiZWZvcmVBY3RpdmF0ZVwiLCBldmVudCwgZXZlbnREYXRhICkgPT09IGZhbHNlICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0b3B0aW9ucy5hY3RpdmUgPSBjb2xsYXBzaW5nID8gZmFsc2UgOiB0aGlzLnRhYnMuaW5kZXgoIHRhYiApO1xuXG5cdFx0dGhpcy5hY3RpdmUgPSBjbGlja2VkSXNBY3RpdmUgPyAkKCkgOiB0YWI7XG5cdFx0aWYgKCB0aGlzLnhociApIHtcblx0XHRcdHRoaXMueGhyLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhdG9IaWRlLmxlbmd0aCAmJiAhdG9TaG93Lmxlbmd0aCApIHtcblx0XHRcdCQuZXJyb3IoIFwialF1ZXJ5IFVJIFRhYnM6IE1pc21hdGNoaW5nIGZyYWdtZW50IGlkZW50aWZpZXIuXCIgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRvU2hvdy5sZW5ndGggKSB7XG5cdFx0XHR0aGlzLmxvYWQoIHRoaXMudGFicy5pbmRleCggdGFiICksIGV2ZW50ICk7XG5cdFx0fVxuXHRcdHRoaXMuX3RvZ2dsZSggZXZlbnQsIGV2ZW50RGF0YSApO1xuXHR9LFxuXG5cdC8vIEhhbmRsZXMgc2hvdy9oaWRlIGZvciBzZWxlY3RpbmcgdGFic1xuXHRfdG9nZ2xlOiBmdW5jdGlvbiggZXZlbnQsIGV2ZW50RGF0YSApIHtcblx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHR0b1Nob3cgPSBldmVudERhdGEubmV3UGFuZWwsXG5cdFx0XHR0b0hpZGUgPSBldmVudERhdGEub2xkUGFuZWw7XG5cblx0XHR0aGlzLnJ1bm5pbmcgPSB0cnVlO1xuXG5cdFx0ZnVuY3Rpb24gY29tcGxldGUoKSB7XG5cdFx0XHR0aGF0LnJ1bm5pbmcgPSBmYWxzZTtcblx0XHRcdHRoYXQuX3RyaWdnZXIoIFwiYWN0aXZhdGVcIiwgZXZlbnQsIGV2ZW50RGF0YSApO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHNob3coKSB7XG5cdFx0XHR0aGF0Ll9hZGRDbGFzcyggZXZlbnREYXRhLm5ld1RhYi5jbG9zZXN0KCBcImxpXCIgKSwgXCJ1aS10YWJzLWFjdGl2ZVwiLCBcInVpLXN0YXRlLWFjdGl2ZVwiICk7XG5cblx0XHRcdGlmICggdG9TaG93Lmxlbmd0aCAmJiB0aGF0Lm9wdGlvbnMuc2hvdyApIHtcblx0XHRcdFx0dGhhdC5fc2hvdyggdG9TaG93LCB0aGF0Lm9wdGlvbnMuc2hvdywgY29tcGxldGUgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRvU2hvdy5zaG93KCk7XG5cdFx0XHRcdGNvbXBsZXRlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3RhcnQgb3V0IGJ5IGhpZGluZywgdGhlbiBzaG93aW5nLCB0aGVuIGNvbXBsZXRpbmdcblx0XHRpZiAoIHRvSGlkZS5sZW5ndGggJiYgdGhpcy5vcHRpb25zLmhpZGUgKSB7XG5cdFx0XHR0aGlzLl9oaWRlKCB0b0hpZGUsIHRoaXMub3B0aW9ucy5oaWRlLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dGhhdC5fcmVtb3ZlQ2xhc3MoIGV2ZW50RGF0YS5vbGRUYWIuY2xvc2VzdCggXCJsaVwiICksXG5cdFx0XHRcdFx0XCJ1aS10YWJzLWFjdGl2ZVwiLCBcInVpLXN0YXRlLWFjdGl2ZVwiICk7XG5cdFx0XHRcdHNob3coKTtcblx0XHRcdH0gKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fcmVtb3ZlQ2xhc3MoIGV2ZW50RGF0YS5vbGRUYWIuY2xvc2VzdCggXCJsaVwiICksXG5cdFx0XHRcdFwidWktdGFicy1hY3RpdmVcIiwgXCJ1aS1zdGF0ZS1hY3RpdmVcIiApO1xuXHRcdFx0dG9IaWRlLmhpZGUoKTtcblx0XHRcdHNob3coKTtcblx0XHR9XG5cblx0XHR0b0hpZGUuYXR0ciggXCJhcmlhLWhpZGRlblwiLCBcInRydWVcIiApO1xuXHRcdGV2ZW50RGF0YS5vbGRUYWIuYXR0cigge1xuXHRcdFx0XCJhcmlhLXNlbGVjdGVkXCI6IFwiZmFsc2VcIixcblx0XHRcdFwiYXJpYS1leHBhbmRlZFwiOiBcImZhbHNlXCJcblx0XHR9ICk7XG5cblx0XHQvLyBJZiB3ZSdyZSBzd2l0Y2hpbmcgdGFicywgcmVtb3ZlIHRoZSBvbGQgdGFiIGZyb20gdGhlIHRhYiBvcmRlci5cblx0XHQvLyBJZiB3ZSdyZSBvcGVuaW5nIGZyb20gY29sbGFwc2VkIHN0YXRlLCByZW1vdmUgdGhlIHByZXZpb3VzIHRhYiBmcm9tIHRoZSB0YWIgb3JkZXIuXG5cdFx0Ly8gSWYgd2UncmUgY29sbGFwc2luZywgdGhlbiBrZWVwIHRoZSBjb2xsYXBzaW5nIHRhYiBpbiB0aGUgdGFiIG9yZGVyLlxuXHRcdGlmICggdG9TaG93Lmxlbmd0aCAmJiB0b0hpZGUubGVuZ3RoICkge1xuXHRcdFx0ZXZlbnREYXRhLm9sZFRhYi5hdHRyKCBcInRhYkluZGV4XCIsIC0xICk7XG5cdFx0fSBlbHNlIGlmICggdG9TaG93Lmxlbmd0aCApIHtcblx0XHRcdHRoaXMudGFicy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gJCggdGhpcyApLmF0dHIoIFwidGFiSW5kZXhcIiApID09PSAwO1xuXHRcdFx0fSApXG5cdFx0XHRcdC5hdHRyKCBcInRhYkluZGV4XCIsIC0xICk7XG5cdFx0fVxuXG5cdFx0dG9TaG93LmF0dHIoIFwiYXJpYS1oaWRkZW5cIiwgXCJmYWxzZVwiICk7XG5cdFx0ZXZlbnREYXRhLm5ld1RhYi5hdHRyKCB7XG5cdFx0XHRcImFyaWEtc2VsZWN0ZWRcIjogXCJ0cnVlXCIsXG5cdFx0XHRcImFyaWEtZXhwYW5kZWRcIjogXCJ0cnVlXCIsXG5cdFx0XHR0YWJJbmRleDogMFxuXHRcdH0gKTtcblx0fSxcblxuXHRfYWN0aXZhdGU6IGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHR2YXIgYW5jaG9yLFxuXHRcdFx0YWN0aXZlID0gdGhpcy5fZmluZEFjdGl2ZSggaW5kZXggKTtcblxuXHRcdC8vIFRyeWluZyB0byBhY3RpdmF0ZSB0aGUgYWxyZWFkeSBhY3RpdmUgcGFuZWxcblx0XHRpZiAoIGFjdGl2ZVsgMCBdID09PSB0aGlzLmFjdGl2ZVsgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFRyeWluZyB0byBjb2xsYXBzZSwgc2ltdWxhdGUgYSBjbGljayBvbiB0aGUgY3VycmVudCBhY3RpdmUgaGVhZGVyXG5cdFx0aWYgKCAhYWN0aXZlLmxlbmd0aCApIHtcblx0XHRcdGFjdGl2ZSA9IHRoaXMuYWN0aXZlO1xuXHRcdH1cblxuXHRcdGFuY2hvciA9IGFjdGl2ZS5maW5kKCBcIi51aS10YWJzLWFuY2hvclwiIClbIDAgXTtcblx0XHR0aGlzLl9ldmVudEhhbmRsZXIoIHtcblx0XHRcdHRhcmdldDogYW5jaG9yLFxuXHRcdFx0Y3VycmVudFRhcmdldDogYW5jaG9yLFxuXHRcdFx0cHJldmVudERlZmF1bHQ6ICQubm9vcFxuXHRcdH0gKTtcblx0fSxcblxuXHRfZmluZEFjdGl2ZTogZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdHJldHVybiBpbmRleCA9PT0gZmFsc2UgPyAkKCkgOiB0aGlzLnRhYnMuZXEoIGluZGV4ICk7XG5cdH0sXG5cblx0X2dldEluZGV4OiBmdW5jdGlvbiggaW5kZXggKSB7XG5cblx0XHQvLyBtZXRhLWZ1bmN0aW9uIHRvIGdpdmUgdXNlcnMgb3B0aW9uIHRvIHByb3ZpZGUgYSBocmVmIHN0cmluZyBpbnN0ZWFkIG9mIGEgbnVtZXJpY2FsIGluZGV4LlxuXHRcdGlmICggdHlwZW9mIGluZGV4ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aW5kZXggPSB0aGlzLmFuY2hvcnMuaW5kZXgoIHRoaXMuYW5jaG9ycy5maWx0ZXIoIFwiW2hyZWYkPSdcIiArXG5cdFx0XHRcdCQudWkuZXNjYXBlU2VsZWN0b3IoIGluZGV4ICkgKyBcIiddXCIgKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBpbmRleDtcblx0fSxcblxuXHRfZGVzdHJveTogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCB0aGlzLnhociApIHtcblx0XHRcdHRoaXMueGhyLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0dGhpcy50YWJsaXN0XG5cdFx0XHQucmVtb3ZlQXR0ciggXCJyb2xlXCIgKVxuXHRcdFx0Lm9mZiggdGhpcy5ldmVudE5hbWVzcGFjZSApO1xuXG5cdFx0dGhpcy5hbmNob3JzXG5cdFx0XHQucmVtb3ZlQXR0ciggXCJyb2xlIHRhYkluZGV4XCIgKVxuXHRcdFx0LnJlbW92ZVVuaXF1ZUlkKCk7XG5cblx0XHR0aGlzLnRhYnMuYWRkKCB0aGlzLnBhbmVscyApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAkLmRhdGEoIHRoaXMsIFwidWktdGFicy1kZXN0cm95XCIgKSApIHtcblx0XHRcdFx0JCggdGhpcyApLnJlbW92ZSgpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0JCggdGhpcyApLnJlbW92ZUF0dHIoIFwicm9sZSB0YWJJbmRleCBcIiArXG5cdFx0XHRcdFx0XCJhcmlhLWxpdmUgYXJpYS1idXN5IGFyaWEtc2VsZWN0ZWQgYXJpYS1sYWJlbGxlZGJ5IGFyaWEtaGlkZGVuIGFyaWEtZXhwYW5kZWRcIiApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdHRoaXMudGFicy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBsaSA9ICQoIHRoaXMgKSxcblx0XHRcdFx0cHJldiA9IGxpLmRhdGEoIFwidWktdGFicy1hcmlhLWNvbnRyb2xzXCIgKTtcblx0XHRcdGlmICggcHJldiApIHtcblx0XHRcdFx0bGlcblx0XHRcdFx0XHQuYXR0ciggXCJhcmlhLWNvbnRyb2xzXCIsIHByZXYgKVxuXHRcdFx0XHRcdC5yZW1vdmVEYXRhKCBcInVpLXRhYnMtYXJpYS1jb250cm9sc1wiICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRsaS5yZW1vdmVBdHRyKCBcImFyaWEtY29udHJvbHNcIiApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdHRoaXMucGFuZWxzLnNob3coKTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmhlaWdodFN0eWxlICE9PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdHRoaXMucGFuZWxzLmNzcyggXCJoZWlnaHRcIiwgXCJcIiApO1xuXHRcdH1cblx0fSxcblxuXHRlbmFibGU6IGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHR2YXIgZGlzYWJsZWQgPSB0aGlzLm9wdGlvbnMuZGlzYWJsZWQ7XG5cdFx0aWYgKCBkaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0ZGlzYWJsZWQgPSBmYWxzZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aW5kZXggPSB0aGlzLl9nZXRJbmRleCggaW5kZXggKTtcblx0XHRcdGlmICggJC5pc0FycmF5KCBkaXNhYmxlZCApICkge1xuXHRcdFx0XHRkaXNhYmxlZCA9ICQubWFwKCBkaXNhYmxlZCwgZnVuY3Rpb24oIG51bSApIHtcblx0XHRcdFx0XHRyZXR1cm4gbnVtICE9PSBpbmRleCA/IG51bSA6IG51bGw7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRpc2FibGVkID0gJC5tYXAoIHRoaXMudGFicywgZnVuY3Rpb24oIGxpLCBudW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG51bSAhPT0gaW5kZXggPyBudW0gOiBudWxsO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMuX3NldE9wdGlvbkRpc2FibGVkKCBkaXNhYmxlZCApO1xuXHR9LFxuXG5cdGRpc2FibGU6IGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHR2YXIgZGlzYWJsZWQgPSB0aGlzLm9wdGlvbnMuZGlzYWJsZWQ7XG5cdFx0aWYgKCBkaXNhYmxlZCA9PT0gdHJ1ZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRkaXNhYmxlZCA9IHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGluZGV4ID0gdGhpcy5fZ2V0SW5kZXgoIGluZGV4ICk7XG5cdFx0XHRpZiAoICQuaW5BcnJheSggaW5kZXgsIGRpc2FibGVkICkgIT09IC0xICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRpZiAoICQuaXNBcnJheSggZGlzYWJsZWQgKSApIHtcblx0XHRcdFx0ZGlzYWJsZWQgPSAkLm1lcmdlKCBbIGluZGV4IF0sIGRpc2FibGVkICkuc29ydCgpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGlzYWJsZWQgPSBbIGluZGV4IF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMuX3NldE9wdGlvbkRpc2FibGVkKCBkaXNhYmxlZCApO1xuXHR9LFxuXG5cdGxvYWQ6IGZ1bmN0aW9uKCBpbmRleCwgZXZlbnQgKSB7XG5cdFx0aW5kZXggPSB0aGlzLl9nZXRJbmRleCggaW5kZXggKTtcblx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHR0YWIgPSB0aGlzLnRhYnMuZXEoIGluZGV4ICksXG5cdFx0XHRhbmNob3IgPSB0YWIuZmluZCggXCIudWktdGFicy1hbmNob3JcIiApLFxuXHRcdFx0cGFuZWwgPSB0aGlzLl9nZXRQYW5lbEZvclRhYiggdGFiICksXG5cdFx0XHRldmVudERhdGEgPSB7XG5cdFx0XHRcdHRhYjogdGFiLFxuXHRcdFx0XHRwYW5lbDogcGFuZWxcblx0XHRcdH0sXG5cdFx0XHRjb21wbGV0ZSA9IGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdHRoYXQucGFuZWxzLnN0b3AoIGZhbHNlLCB0cnVlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGF0Ll9yZW1vdmVDbGFzcyggdGFiLCBcInVpLXRhYnMtbG9hZGluZ1wiICk7XG5cdFx0XHRcdHBhbmVsLnJlbW92ZUF0dHIoIFwiYXJpYS1idXN5XCIgKTtcblxuXHRcdFx0XHRpZiAoIGpxWEhSID09PSB0aGF0LnhociApIHtcblx0XHRcdFx0XHRkZWxldGUgdGhhdC54aHI7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBOb3QgcmVtb3RlXG5cdFx0aWYgKCB0aGlzLl9pc0xvY2FsKCBhbmNob3JbIDAgXSApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMueGhyID0gJC5hamF4KCB0aGlzLl9hamF4U2V0dGluZ3MoIGFuY2hvciwgZXZlbnQsIGV2ZW50RGF0YSApICk7XG5cblx0XHQvLyBTdXBwb3J0OiBqUXVlcnkgPDEuOFxuXHRcdC8vIGpRdWVyeSA8MS44IHJldHVybnMgZmFsc2UgaWYgdGhlIHJlcXVlc3QgaXMgY2FuY2VsZWQgaW4gYmVmb3JlU2VuZCxcblx0XHQvLyBidXQgYXMgb2YgMS44LCAkLmFqYXgoKSBhbHdheXMgcmV0dXJucyBhIGpxWEhSIG9iamVjdC5cblx0XHRpZiAoIHRoaXMueGhyICYmIHRoaXMueGhyLnN0YXR1c1RleHQgIT09IFwiY2FuY2VsZWRcIiApIHtcblx0XHRcdHRoaXMuX2FkZENsYXNzKCB0YWIsIFwidWktdGFicy1sb2FkaW5nXCIgKTtcblx0XHRcdHBhbmVsLmF0dHIoIFwiYXJpYS1idXN5XCIsIFwidHJ1ZVwiICk7XG5cblx0XHRcdHRoaXMueGhyXG5cdFx0XHRcdC5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2UsIHN0YXR1cywganFYSFIgKSB7XG5cblx0XHRcdFx0XHQvLyBzdXBwb3J0OiBqUXVlcnkgPDEuOFxuXHRcdFx0XHRcdC8vIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzExNzc4XG5cdFx0XHRcdFx0c2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRwYW5lbC5odG1sKCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0dGhhdC5fdHJpZ2dlciggXCJsb2FkXCIsIGV2ZW50LCBldmVudERhdGEgKTtcblxuXHRcdFx0XHRcdFx0Y29tcGxldGUoIGpxWEhSLCBzdGF0dXMgKTtcblx0XHRcdFx0XHR9LCAxICk7XG5cdFx0XHRcdH0gKVxuXHRcdFx0XHQuZmFpbCggZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cblx0XHRcdFx0XHQvLyBzdXBwb3J0OiBqUXVlcnkgPDEuOFxuXHRcdFx0XHRcdC8vIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzExNzc4XG5cdFx0XHRcdFx0c2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRjb21wbGV0ZSgganFYSFIsIHN0YXR1cyApO1xuXHRcdFx0XHRcdH0sIDEgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblx0fSxcblxuXHRfYWpheFNldHRpbmdzOiBmdW5jdGlvbiggYW5jaG9yLCBldmVudCwgZXZlbnREYXRhICkge1xuXHRcdHZhciB0aGF0ID0gdGhpcztcblx0XHRyZXR1cm4ge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8MTEgb25seVxuXHRcdFx0Ly8gU3RyaXAgYW55IGhhc2ggdGhhdCBleGlzdHMgdG8gcHJldmVudCBlcnJvcnMgd2l0aCB0aGUgQWpheCByZXF1ZXN0XG5cdFx0XHR1cmw6IGFuY2hvci5hdHRyKCBcImhyZWZcIiApLnJlcGxhY2UoIC8jLiokLywgXCJcIiApLFxuXHRcdFx0YmVmb3JlU2VuZDogZnVuY3Rpb24oIGpxWEhSLCBzZXR0aW5ncyApIHtcblx0XHRcdFx0cmV0dXJuIHRoYXQuX3RyaWdnZXIoIFwiYmVmb3JlTG9hZFwiLCBldmVudCxcblx0XHRcdFx0XHQkLmV4dGVuZCggeyBqcVhIUjoganFYSFIsIGFqYXhTZXR0aW5nczogc2V0dGluZ3MgfSwgZXZlbnREYXRhICkgKTtcblx0XHRcdH1cblx0XHR9O1xuXHR9LFxuXG5cdF9nZXRQYW5lbEZvclRhYjogZnVuY3Rpb24oIHRhYiApIHtcblx0XHR2YXIgaWQgPSAkKCB0YWIgKS5hdHRyKCBcImFyaWEtY29udHJvbHNcIiApO1xuXHRcdHJldHVybiB0aGlzLmVsZW1lbnQuZmluZCggdGhpcy5fc2FuaXRpemVTZWxlY3RvciggXCIjXCIgKyBpZCApICk7XG5cdH1cbn0gKTtcblxuLy8gREVQUkVDQVRFRFxuLy8gVE9ETzogU3dpdGNoIHJldHVybiBiYWNrIHRvIHdpZGdldCBkZWNsYXJhdGlvbiBhdCB0b3Agb2YgZmlsZSB3aGVuIHRoaXMgaXMgcmVtb3ZlZFxuaWYgKCAkLnVpQmFja0NvbXBhdCAhPT0gZmFsc2UgKSB7XG5cblx0Ly8gQmFja2NvbXBhdCBmb3IgdWktdGFiIGNsYXNzIChub3cgdWktdGFicy10YWIpXG5cdCQud2lkZ2V0KCBcInVpLnRhYnNcIiwgJC51aS50YWJzLCB7XG5cdFx0X3Byb2Nlc3NUYWJzOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuX3N1cGVyQXBwbHkoIGFyZ3VtZW50cyApO1xuXHRcdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMudGFicywgXCJ1aS10YWJcIiApO1xuXHRcdH1cblx0fSApO1xufVxuXG5yZXR1cm4gJC51aS50YWJzO1xuXG59ICkgKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=